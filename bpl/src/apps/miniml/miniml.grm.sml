functor MiniMLLrValsFun(structure Token: TOKEN) = 
struct
structure ParserData=
struct
structure Header = 
struct
(* Copyright (c) 2006  The BPL Group at the IT University of Copenhagen
 *
 * This file is part of BPL.
 *
 * BPL is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or (at
 * your option) any later version.
 *
 * BPL is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with BPL; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301
 * USA
 *)

(** Parser specification for MiniML terms with syntactic sugar.
 * @version $LastChangedRevision: 442 $
 * Modified: $Date: 2006/06/04 20:13:27 $ by: $Author: hniss $
 *)

structure A = MiniML
structure P = Pattern

type info = int * int

type pat = P.pat
type  exp = (info,pat)  MiniML.exp
type bind = (info,pat) MiniML.bind
type prog = (info,pat) MiniML.prog

fun error (msg, info as ({pos=p1,src={file=file}},{pos=p2,src=s2})) =
    let open Pretty
	val err = SourceLocation.ppSourceLocation file (p1,p2) [ppString msg]
    in  ppPrint err (plainOutput ("(*","*)")) TextIO.stdErr
    end

fun mk_info ({pos=p1,src=s1},{pos=p2,src=s2}) = (p1,p2)

fun mk_const name arity span = P.ConstCon({name=name,arity=arity,span=span})
val TRUEcon  = mk_const "True"  0 2
val FALSEcon = mk_const "False" 0 2
val NILcon   = mk_const "Nil"   0 2
val CONScon  = mk_const "Cons"  2 2
val UNITcon  = P.TupleCon 0
val nullCarg = [P.PVar "_x"]

(* extract a list of bound toplevel value identifiers *)
fun boundIds bs =
    let fun f (A.ValBind(x,_), bs) = if List.exists (fn y => x=y) bs then bs else x::bs
          | f (_, bs) = bs
    in  rev(List.foldl f [] bs)
    end

fun mk_case info eof pnes = A.Info(mk_info info, A.Case(eof, pnes))

fun mk_tup es =
    case es of
	[]  => A.Unit
      | [e] => e
      | es  => A.Tuple es
fun mk_tup_pat ps =
    case ps of
	[]  => P.PCon(UNITcon, [])
      | [p] => p
      | ps  => P.PCon(P.TupleCon(List.length ps), ps)

fun mk_fun info (fmatch as (f,_)::_) =
    (* transform
          fun f p11 ... p1n = e1
            | f p21 ... p2n = e2
                 ........
            | f pm1 ... pmn = em
       into
          fix f (fn v1 => fn v2 => ... fn vm =>
                 case (v1,v2,...,vm) of
                    (p11, ..., p1n) => e1
                  | (p21, ..., p2n) => e2
                  | ...
                  | (pm1, ..., pmn) => em
                 )
    *)
    let val lens = List.map (List.length o #1 o #2) fmatch
	fun eq (l, 0) = true
	  | eq (l, l') = l=l'
	val len = 
	    List.foldl 
	       (fn (pl,l) => 
		   if eq(pl,l) then pl
		   else ( error("Different number of arguments in function clauses",info)
                        ; l)
               ) 0 lens
	val args = List.tabulate(len, fn i => "_x"^Int.toString i)
	val (x,fns) = case args of [] => Util.abort 1111
				 | (x::args) => (x,args)
	val cas = 
	    mk_case info 
		    (mk_tup (List.map A.Var args))
		    (List.map (fn (_,(ps,e))=>(mk_tup_pat ps,e)) fmatch)
	val fns = List.foldr (fn (y,f)=>A.Abs(y,f)) cas fns
    in  A.ValBind(f, A.Fix(f, x, fns))
    end
  | mk_fun info _ = Util.abort 11111

fun mk_list xs =
    let fun f (x, xs) = A.Const("Cons", A.Tuple [x,xs])
    in  List.foldr f (A.Const("Nil", A.Unit)) xs
    end

fun mk_seq es =
    let fun f (e, body) = A.Let("_x",e,body)
    in  List.foldr f A.Unit es
    end

val native_strings =
    Flags.makeBoolFlag{name="/codegen/native/strings",default=false,
		       short="strings",long="native-strings",arg="",
		       desc="Use native strings (instead of a datatype)"}

fun mk_string s =
    if !native_strings then A.String s
    else 
	let val s = String.explode s
	    fun char2exp ch = A.Const(Char.toString ch, A.Unit)
	in  mk_list (map (char2exp o Char.toUpper) s)
	end

val native_ints =
    Flags.makeBoolFlag{name="/codegen/native/ints",default=false,
		       short="-ints",long="native-ints",arg="",
		       desc="Use native integers (instead of a datatype)"}

fun mk_int i = 
    if !native_ints then A.Integer i
    else if i < 0 then raise Fail("The encoding does not support negative ints")
    else
      let fun loop 0 = A.Const("Z", A.Unit)
	    | loop n = A.Const("S", loop (n-1))
      in  loop i
      end

local
    fun prim func e1 e2 : exp = A.App(A.Var func, A.Tuple [e1,e2])
    val primops = 
	[ ("+",   prim "iplus" : exp -> exp -> exp)
	, ("-",   prim "iminus")
	, ("*",   prim "itimes")
	, ("=",   prim "iequal")
	, ("<",   prim "ilt")
	, ("<=",  prim "ileq")
	, (">",   prim "igt")
	, (">=",  prim "igeq")
	, ("@",   prim "lappend")
	, ("^",   prim "sconcat")
	]

    structure HT = HashTable
    exception PrimNotFound

    val primop_table : (string, exp -> exp -> exp) HashTable.hash_table =
	HT.mkTable(HashString.hashString, op = ) (37,PrimNotFound)
    val _ = 
	List.app (fn (s,t : exp -> exp -> exp) => HT.insert primop_table (s, t)) primops
in
    val lookup = HT.lookup primop_table

end (*local*)

fun mk_aprim ope e1 e2 =
    if !native_ints then A.PrimOp(A.Arith ope, e1, e2)
    else (lookup ope) e1 e2

fun mk_rprim ope e1 e2 =
    if !native_ints then A.PrimOp(A.Rel ope, e1, e2)
    else (lookup ope) e1 e2


end
structure LrTable = Token.LrTable
structure Token = Token
local open LrTable in 
val table=let val actionRows =
"\
\\001\000\002\000\224\000\003\000\224\000\004\000\224\000\005\000\046\000\
\\006\000\045\000\007\000\044\000\008\000\043\000\009\000\042\000\
\\010\000\041\000\011\000\040\000\014\000\224\000\018\000\039\000\
\\020\000\224\000\022\000\224\000\023\000\038\000\026\000\037\000\
\\027\000\036\000\028\000\035\000\035\000\224\000\036\000\224\000\
\\038\000\224\000\039\000\224\000\042\000\224\000\043\000\224\000\
\\044\000\224\000\045\000\224\000\046\000\224\000\049\000\224\000\000\000\
\\001\000\002\000\225\000\003\000\225\000\004\000\225\000\014\000\225\000\
\\017\000\139\000\020\000\225\000\022\000\225\000\035\000\225\000\
\\036\000\225\000\038\000\225\000\039\000\225\000\042\000\225\000\
\\043\000\225\000\044\000\225\000\045\000\225\000\046\000\225\000\
\\049\000\225\000\000\000\
\\001\000\002\000\226\000\003\000\226\000\004\000\226\000\014\000\226\000\
\\020\000\226\000\022\000\226\000\035\000\226\000\036\000\226\000\
\\038\000\226\000\039\000\226\000\042\000\226\000\043\000\226\000\
\\044\000\226\000\045\000\226\000\046\000\226\000\049\000\226\000\000\000\
\\001\000\002\000\227\000\003\000\227\000\004\000\047\000\014\000\227\000\
\\020\000\227\000\022\000\227\000\035\000\227\000\036\000\227\000\
\\038\000\227\000\039\000\227\000\042\000\227\000\043\000\227\000\
\\044\000\227\000\045\000\227\000\046\000\227\000\049\000\227\000\000\000\
\\001\000\002\000\228\000\003\000\228\000\004\000\047\000\014\000\228\000\
\\020\000\228\000\022\000\228\000\035\000\228\000\036\000\228\000\
\\038\000\228\000\039\000\228\000\042\000\228\000\043\000\228\000\
\\044\000\228\000\045\000\228\000\046\000\228\000\049\000\228\000\000\000\
\\001\000\002\000\229\000\003\000\229\000\004\000\229\000\014\000\229\000\
\\020\000\229\000\022\000\229\000\035\000\229\000\036\000\229\000\
\\038\000\229\000\039\000\229\000\042\000\229\000\043\000\229\000\
\\044\000\229\000\045\000\229\000\046\000\229\000\049\000\229\000\000\000\
\\001\000\002\000\230\000\003\000\230\000\004\000\230\000\014\000\230\000\
\\020\000\230\000\022\000\230\000\035\000\230\000\036\000\230\000\
\\038\000\230\000\039\000\230\000\042\000\230\000\043\000\230\000\
\\044\000\230\000\045\000\230\000\046\000\230\000\049\000\230\000\000\000\
\\001\000\002\000\231\000\003\000\231\000\004\000\047\000\014\000\231\000\
\\020\000\231\000\022\000\231\000\035\000\231\000\036\000\231\000\
\\038\000\231\000\039\000\231\000\042\000\231\000\043\000\231\000\
\\044\000\231\000\045\000\231\000\046\000\231\000\049\000\231\000\000\000\
\\001\000\002\000\232\000\003\000\232\000\004\000\232\000\005\000\232\000\
\\006\000\232\000\007\000\232\000\008\000\232\000\009\000\232\000\
\\010\000\232\000\011\000\232\000\014\000\232\000\018\000\232\000\
\\019\000\029\000\020\000\232\000\021\000\028\000\022\000\232\000\
\\023\000\232\000\026\000\232\000\027\000\232\000\028\000\232\000\
\\029\000\025\000\030\000\024\000\033\000\022\000\034\000\021\000\
\\035\000\232\000\036\000\232\000\038\000\232\000\039\000\232\000\
\\042\000\232\000\043\000\232\000\044\000\232\000\045\000\232\000\
\\046\000\232\000\049\000\232\000\000\000\
\\001\000\002\000\233\000\003\000\233\000\004\000\233\000\005\000\233\000\
\\006\000\233\000\007\000\233\000\008\000\233\000\009\000\233\000\
\\010\000\233\000\011\000\233\000\014\000\233\000\018\000\039\000\
\\020\000\233\000\022\000\233\000\023\000\038\000\026\000\233\000\
\\027\000\036\000\028\000\035\000\035\000\233\000\036\000\233\000\
\\038\000\233\000\039\000\233\000\042\000\233\000\043\000\233\000\
\\044\000\233\000\045\000\233\000\046\000\233\000\049\000\233\000\000\000\
\\001\000\002\000\234\000\003\000\234\000\004\000\234\000\005\000\234\000\
\\006\000\234\000\007\000\234\000\008\000\234\000\009\000\234\000\
\\010\000\234\000\011\000\234\000\014\000\234\000\018\000\039\000\
\\020\000\234\000\022\000\234\000\023\000\038\000\026\000\234\000\
\\027\000\036\000\028\000\035\000\035\000\234\000\036\000\234\000\
\\038\000\234\000\039\000\234\000\042\000\234\000\043\000\234\000\
\\044\000\234\000\045\000\234\000\046\000\234\000\049\000\234\000\000\000\
\\001\000\002\000\235\000\003\000\235\000\004\000\235\000\005\000\235\000\
\\006\000\235\000\007\000\235\000\008\000\235\000\009\000\235\000\
\\010\000\235\000\011\000\235\000\014\000\235\000\018\000\039\000\
\\020\000\235\000\022\000\235\000\023\000\235\000\026\000\235\000\
\\027\000\235\000\028\000\235\000\035\000\235\000\036\000\235\000\
\\038\000\235\000\039\000\235\000\042\000\235\000\043\000\235\000\
\\044\000\235\000\045\000\235\000\046\000\235\000\049\000\235\000\000\000\
\\001\000\002\000\236\000\003\000\236\000\004\000\236\000\005\000\236\000\
\\006\000\236\000\007\000\236\000\008\000\236\000\009\000\236\000\
\\010\000\041\000\011\000\040\000\014\000\236\000\018\000\039\000\
\\020\000\236\000\022\000\236\000\023\000\038\000\026\000\236\000\
\\027\000\036\000\028\000\035\000\035\000\236\000\036\000\236\000\
\\038\000\236\000\039\000\236\000\042\000\236\000\043\000\236\000\
\\044\000\236\000\045\000\236\000\046\000\236\000\049\000\236\000\000\000\
\\001\000\002\000\237\000\003\000\237\000\004\000\237\000\005\000\237\000\
\\006\000\237\000\007\000\237\000\008\000\237\000\009\000\237\000\
\\010\000\041\000\011\000\040\000\014\000\237\000\018\000\039\000\
\\020\000\237\000\022\000\237\000\023\000\038\000\026\000\237\000\
\\027\000\036\000\028\000\035\000\035\000\237\000\036\000\237\000\
\\038\000\237\000\039\000\237\000\042\000\237\000\043\000\237\000\
\\044\000\237\000\045\000\237\000\046\000\237\000\049\000\237\000\000\000\
\\001\000\002\000\238\000\003\000\238\000\004\000\238\000\005\000\238\000\
\\006\000\238\000\007\000\238\000\008\000\238\000\009\000\238\000\
\\010\000\041\000\011\000\040\000\014\000\238\000\018\000\039\000\
\\020\000\238\000\022\000\238\000\023\000\038\000\026\000\238\000\
\\027\000\036\000\028\000\035\000\035\000\238\000\036\000\238\000\
\\038\000\238\000\039\000\238\000\042\000\238\000\043\000\238\000\
\\044\000\238\000\045\000\238\000\046\000\238\000\049\000\238\000\000\000\
\\001\000\002\000\239\000\003\000\239\000\004\000\239\000\005\000\239\000\
\\006\000\239\000\007\000\239\000\008\000\239\000\009\000\239\000\
\\010\000\041\000\011\000\040\000\014\000\239\000\018\000\039\000\
\\020\000\239\000\022\000\239\000\023\000\038\000\026\000\239\000\
\\027\000\036\000\028\000\035\000\035\000\239\000\036\000\239\000\
\\038\000\239\000\039\000\239\000\042\000\239\000\043\000\239\000\
\\044\000\239\000\045\000\239\000\046\000\239\000\049\000\239\000\000\000\
\\001\000\002\000\240\000\003\000\240\000\004\000\240\000\005\000\240\000\
\\006\000\240\000\007\000\240\000\008\000\240\000\009\000\240\000\
\\010\000\041\000\011\000\040\000\014\000\240\000\018\000\039\000\
\\020\000\240\000\022\000\240\000\023\000\038\000\026\000\240\000\
\\027\000\036\000\028\000\035\000\035\000\240\000\036\000\240\000\
\\038\000\240\000\039\000\240\000\042\000\240\000\043\000\240\000\
\\044\000\240\000\045\000\240\000\046\000\240\000\049\000\240\000\000\000\
\\001\000\002\000\241\000\003\000\241\000\004\000\241\000\005\000\241\000\
\\006\000\241\000\007\000\241\000\008\000\241\000\009\000\241\000\
\\010\000\241\000\011\000\241\000\014\000\241\000\018\000\039\000\
\\020\000\241\000\022\000\241\000\023\000\241\000\026\000\241\000\
\\027\000\241\000\028\000\241\000\035\000\241\000\036\000\241\000\
\\038\000\241\000\039\000\241\000\042\000\241\000\043\000\241\000\
\\044\000\241\000\045\000\241\000\046\000\241\000\049\000\241\000\000\000\
\\001\000\002\000\242\000\003\000\242\000\004\000\242\000\005\000\242\000\
\\006\000\242\000\007\000\242\000\008\000\242\000\009\000\242\000\
\\010\000\242\000\011\000\242\000\014\000\242\000\018\000\039\000\
\\020\000\242\000\022\000\242\000\023\000\242\000\026\000\242\000\
\\027\000\036\000\028\000\242\000\035\000\242\000\036\000\242\000\
\\038\000\242\000\039\000\242\000\042\000\242\000\043\000\242\000\
\\044\000\242\000\045\000\242\000\046\000\242\000\049\000\242\000\000\000\
\\001\000\002\000\243\000\003\000\243\000\004\000\243\000\005\000\243\000\
\\006\000\243\000\007\000\243\000\008\000\243\000\009\000\243\000\
\\010\000\243\000\011\000\243\000\014\000\243\000\018\000\039\000\
\\020\000\243\000\022\000\243\000\023\000\038\000\026\000\243\000\
\\027\000\036\000\028\000\035\000\035\000\243\000\036\000\243\000\
\\038\000\243\000\039\000\243\000\042\000\243\000\043\000\243\000\
\\044\000\243\000\045\000\243\000\046\000\243\000\049\000\243\000\000\000\
\\001\000\002\000\244\000\003\000\244\000\004\000\244\000\005\000\046\000\
\\006\000\045\000\007\000\044\000\008\000\043\000\009\000\042\000\
\\010\000\041\000\011\000\040\000\014\000\244\000\018\000\039\000\
\\020\000\244\000\022\000\244\000\023\000\038\000\026\000\244\000\
\\027\000\036\000\028\000\035\000\035\000\244\000\036\000\244\000\
\\038\000\244\000\039\000\244\000\042\000\244\000\043\000\244\000\
\\044\000\244\000\045\000\244\000\046\000\244\000\049\000\244\000\000\000\
\\001\000\002\000\245\000\003\000\245\000\004\000\245\000\005\000\245\000\
\\006\000\245\000\007\000\245\000\008\000\245\000\009\000\245\000\
\\010\000\245\000\011\000\245\000\014\000\245\000\018\000\245\000\
\\019\000\245\000\020\000\245\000\021\000\245\000\022\000\245\000\
\\023\000\245\000\026\000\245\000\027\000\245\000\028\000\245\000\
\\029\000\245\000\030\000\245\000\033\000\245\000\034\000\245\000\
\\035\000\245\000\036\000\245\000\038\000\245\000\039\000\245\000\
\\042\000\245\000\043\000\245\000\044\000\245\000\045\000\245\000\
\\046\000\245\000\049\000\245\000\000\000\
\\001\000\002\000\246\000\003\000\246\000\004\000\246\000\005\000\246\000\
\\006\000\246\000\007\000\246\000\008\000\246\000\009\000\246\000\
\\010\000\246\000\011\000\246\000\014\000\246\000\018\000\246\000\
\\019\000\246\000\020\000\246\000\021\000\246\000\022\000\246\000\
\\023\000\246\000\026\000\246\000\027\000\246\000\028\000\246\000\
\\029\000\246\000\030\000\246\000\033\000\246\000\034\000\246\000\
\\035\000\246\000\036\000\246\000\038\000\246\000\039\000\246\000\
\\042\000\246\000\043\000\246\000\044\000\246\000\045\000\246\000\
\\046\000\246\000\049\000\246\000\000\000\
\\001\000\002\000\247\000\003\000\247\000\004\000\247\000\005\000\247\000\
\\006\000\247\000\007\000\247\000\008\000\247\000\009\000\247\000\
\\010\000\247\000\011\000\247\000\014\000\247\000\018\000\247\000\
\\019\000\247\000\020\000\247\000\021\000\247\000\022\000\247\000\
\\023\000\247\000\026\000\247\000\027\000\247\000\028\000\247\000\
\\029\000\247\000\030\000\247\000\033\000\247\000\034\000\247\000\
\\035\000\247\000\036\000\247\000\038\000\247\000\039\000\247\000\
\\042\000\247\000\043\000\247\000\044\000\247\000\045\000\247\000\
\\046\000\247\000\049\000\247\000\000\000\
\\001\000\002\000\248\000\003\000\248\000\004\000\248\000\005\000\248\000\
\\006\000\248\000\007\000\248\000\008\000\248\000\009\000\248\000\
\\010\000\248\000\011\000\248\000\014\000\248\000\018\000\248\000\
\\019\000\248\000\020\000\248\000\021\000\248\000\022\000\248\000\
\\023\000\248\000\026\000\248\000\027\000\248\000\028\000\248\000\
\\029\000\248\000\030\000\248\000\033\000\248\000\034\000\248\000\
\\035\000\248\000\036\000\248\000\038\000\248\000\039\000\248\000\
\\042\000\248\000\043\000\248\000\044\000\248\000\045\000\248\000\
\\046\000\248\000\049\000\248\000\000\000\
\\001\000\002\000\249\000\003\000\249\000\004\000\249\000\005\000\249\000\
\\006\000\249\000\007\000\249\000\008\000\249\000\009\000\249\000\
\\010\000\249\000\011\000\249\000\014\000\249\000\018\000\249\000\
\\019\000\249\000\020\000\249\000\021\000\249\000\022\000\249\000\
\\023\000\249\000\026\000\249\000\027\000\249\000\028\000\249\000\
\\029\000\249\000\030\000\249\000\033\000\249\000\034\000\249\000\
\\035\000\249\000\036\000\249\000\038\000\249\000\039\000\249\000\
\\042\000\249\000\043\000\249\000\044\000\249\000\045\000\249\000\
\\046\000\249\000\049\000\249\000\000\000\
\\001\000\002\000\250\000\003\000\250\000\004\000\250\000\005\000\250\000\
\\006\000\250\000\007\000\250\000\008\000\250\000\009\000\250\000\
\\010\000\250\000\011\000\250\000\014\000\250\000\018\000\250\000\
\\019\000\250\000\020\000\250\000\021\000\250\000\022\000\250\000\
\\023\000\250\000\026\000\250\000\027\000\250\000\028\000\250\000\
\\029\000\250\000\030\000\250\000\033\000\250\000\034\000\250\000\
\\035\000\250\000\036\000\250\000\038\000\250\000\039\000\250\000\
\\042\000\250\000\043\000\250\000\044\000\250\000\045\000\250\000\
\\046\000\250\000\049\000\250\000\000\000\
\\001\000\002\000\251\000\003\000\251\000\004\000\251\000\005\000\251\000\
\\006\000\251\000\007\000\251\000\008\000\251\000\009\000\251\000\
\\010\000\251\000\011\000\251\000\014\000\251\000\018\000\251\000\
\\019\000\251\000\020\000\251\000\021\000\251\000\022\000\251\000\
\\023\000\251\000\026\000\251\000\027\000\251\000\028\000\251\000\
\\029\000\251\000\030\000\251\000\033\000\251\000\034\000\251\000\
\\035\000\251\000\036\000\251\000\038\000\251\000\039\000\251\000\
\\042\000\251\000\043\000\251\000\044\000\251\000\045\000\251\000\
\\046\000\251\000\049\000\251\000\000\000\
\\001\000\002\000\252\000\003\000\252\000\004\000\252\000\005\000\252\000\
\\006\000\252\000\007\000\252\000\008\000\252\000\009\000\252\000\
\\010\000\252\000\011\000\252\000\014\000\252\000\018\000\252\000\
\\019\000\252\000\020\000\252\000\021\000\252\000\022\000\252\000\
\\023\000\252\000\026\000\252\000\027\000\252\000\028\000\252\000\
\\029\000\252\000\030\000\252\000\033\000\252\000\034\000\252\000\
\\035\000\252\000\036\000\252\000\038\000\252\000\039\000\252\000\
\\042\000\252\000\043\000\252\000\044\000\252\000\045\000\252\000\
\\046\000\252\000\049\000\252\000\000\000\
\\001\000\002\000\253\000\003\000\253\000\004\000\253\000\005\000\253\000\
\\006\000\253\000\007\000\253\000\008\000\253\000\009\000\253\000\
\\010\000\253\000\011\000\253\000\014\000\253\000\018\000\253\000\
\\019\000\253\000\020\000\253\000\021\000\253\000\022\000\253\000\
\\023\000\253\000\026\000\253\000\027\000\253\000\028\000\253\000\
\\029\000\253\000\030\000\253\000\033\000\253\000\034\000\253\000\
\\035\000\253\000\036\000\253\000\038\000\253\000\039\000\253\000\
\\042\000\253\000\043\000\253\000\044\000\253\000\045\000\253\000\
\\046\000\253\000\049\000\253\000\000\000\
\\001\000\002\000\254\000\003\000\254\000\004\000\254\000\005\000\254\000\
\\006\000\254\000\007\000\254\000\008\000\254\000\009\000\254\000\
\\010\000\254\000\011\000\254\000\014\000\254\000\018\000\254\000\
\\019\000\254\000\020\000\254\000\021\000\254\000\022\000\254\000\
\\023\000\254\000\026\000\254\000\027\000\254\000\028\000\254\000\
\\029\000\254\000\030\000\254\000\033\000\254\000\034\000\254\000\
\\035\000\254\000\036\000\254\000\038\000\254\000\039\000\254\000\
\\042\000\254\000\043\000\254\000\044\000\254\000\045\000\254\000\
\\046\000\254\000\049\000\254\000\000\000\
\\001\000\002\000\255\000\003\000\255\000\004\000\255\000\005\000\255\000\
\\006\000\255\000\007\000\255\000\008\000\255\000\009\000\255\000\
\\010\000\255\000\011\000\255\000\014\000\255\000\018\000\255\000\
\\019\000\255\000\020\000\255\000\021\000\255\000\022\000\255\000\
\\023\000\255\000\026\000\255\000\027\000\255\000\028\000\255\000\
\\029\000\255\000\030\000\255\000\033\000\255\000\034\000\255\000\
\\035\000\255\000\036\000\255\000\038\000\255\000\039\000\255\000\
\\042\000\255\000\043\000\255\000\044\000\255\000\045\000\255\000\
\\046\000\255\000\049\000\255\000\000\000\
\\001\000\002\000\000\001\003\000\000\001\004\000\000\001\005\000\000\001\
\\006\000\000\001\007\000\000\001\008\000\000\001\009\000\000\001\
\\010\000\000\001\011\000\000\001\014\000\000\001\018\000\000\001\
\\019\000\000\001\020\000\000\001\021\000\000\001\022\000\000\001\
\\023\000\000\001\026\000\000\001\027\000\000\001\028\000\000\001\
\\029\000\000\001\030\000\000\001\033\000\000\001\034\000\000\001\
\\035\000\000\001\036\000\000\001\038\000\000\001\039\000\000\001\
\\042\000\000\001\043\000\000\001\044\000\000\001\045\000\000\001\
\\046\000\000\001\049\000\000\001\000\000\
\\001\000\002\000\001\001\003\000\001\001\004\000\001\001\005\000\001\001\
\\006\000\001\001\007\000\001\001\008\000\001\001\009\000\001\001\
\\010\000\001\001\011\000\001\001\014\000\001\001\018\000\001\001\
\\019\000\001\001\020\000\001\001\021\000\001\001\022\000\001\001\
\\023\000\001\001\026\000\001\001\027\000\001\001\028\000\001\001\
\\029\000\001\001\030\000\001\001\033\000\001\001\034\000\001\001\
\\035\000\001\001\036\000\001\001\038\000\001\001\039\000\001\001\
\\042\000\001\001\043\000\001\001\044\000\001\001\045\000\001\001\
\\046\000\001\001\049\000\001\001\000\000\
\\001\000\002\000\002\001\003\000\002\001\004\000\002\001\014\000\002\001\
\\019\000\065\000\020\000\002\001\022\000\002\001\035\000\002\001\
\\036\000\002\001\038\000\002\001\039\000\002\001\042\000\002\001\
\\043\000\002\001\044\000\002\001\045\000\002\001\046\000\002\001\
\\049\000\002\001\000\000\
\\001\000\002\000\003\001\003\000\003\001\004\000\003\001\014\000\003\001\
\\020\000\003\001\022\000\003\001\035\000\003\001\036\000\003\001\
\\038\000\003\001\039\000\003\001\042\000\003\001\043\000\003\001\
\\044\000\003\001\045\000\003\001\046\000\003\001\049\000\003\001\000\000\
\\001\000\002\000\014\001\003\000\014\001\004\000\014\001\014\000\014\001\
\\020\000\014\001\022\000\014\001\035\000\014\001\036\000\014\001\
\\038\000\014\001\039\000\014\001\042\000\014\001\043\000\014\001\
\\044\000\014\001\045\000\014\001\046\000\014\001\049\000\014\001\000\000\
\\001\000\002\000\015\001\003\000\015\001\004\000\015\001\014\000\015\001\
\\020\000\015\001\022\000\015\001\035\000\015\001\036\000\015\001\
\\038\000\015\001\039\000\015\001\042\000\015\001\043\000\015\001\
\\044\000\015\001\045\000\015\001\046\000\015\001\049\000\015\001\000\000\
\\001\000\002\000\016\001\003\000\016\001\004\000\016\001\014\000\132\000\
\\020\000\016\001\022\000\016\001\035\000\016\001\036\000\016\001\
\\038\000\016\001\039\000\016\001\042\000\016\001\043\000\016\001\
\\044\000\016\001\045\000\016\001\046\000\016\001\049\000\016\001\000\000\
\\001\000\002\000\017\001\003\000\017\001\004\000\047\000\014\000\017\001\
\\020\000\017\001\022\000\017\001\035\000\017\001\036\000\017\001\
\\038\000\017\001\039\000\017\001\042\000\017\001\043\000\017\001\
\\044\000\017\001\045\000\017\001\046\000\017\001\049\000\017\001\000\000\
\\001\000\002\000\018\001\005\000\018\001\013\000\018\001\019\000\018\001\
\\020\000\018\001\021\000\018\001\023\000\018\001\030\000\018\001\
\\032\000\018\001\000\000\
\\001\000\002\000\019\001\005\000\019\001\013\000\019\001\019\000\019\001\
\\020\000\019\001\021\000\019\001\030\000\019\001\032\000\019\001\000\000\
\\001\000\002\000\019\001\013\000\019\001\019\000\081\000\020\000\019\001\
\\021\000\080\000\023\000\019\001\030\000\079\000\032\000\117\000\000\000\
\\001\000\002\000\020\001\005\000\020\001\013\000\020\001\019\000\020\001\
\\020\000\020\001\021\000\020\001\023\000\020\001\030\000\020\001\
\\032\000\020\001\000\000\
\\001\000\002\000\021\001\005\000\021\001\013\000\021\001\019\000\021\001\
\\020\000\021\001\021\000\021\001\023\000\021\001\030\000\021\001\
\\032\000\021\001\000\000\
\\001\000\002\000\022\001\005\000\022\001\013\000\022\001\019\000\022\001\
\\020\000\022\001\021\000\022\001\023\000\022\001\030\000\022\001\
\\032\000\022\001\000\000\
\\001\000\002\000\023\001\013\000\023\001\020\000\023\001\023\000\129\000\000\000\
\\001\000\002\000\024\001\013\000\024\001\020\000\024\001\000\000\
\\001\000\002\000\025\001\013\000\025\001\020\000\025\001\000\000\
\\001\000\002\000\042\001\003\000\042\001\004\000\042\001\005\000\042\001\
\\014\000\042\001\017\000\042\001\020\000\042\001\022\000\042\001\
\\035\000\042\001\036\000\042\001\038\000\042\001\039\000\042\001\
\\042\000\042\001\043\000\042\001\044\000\042\001\045\000\042\001\
\\046\000\042\001\049\000\042\001\000\000\
\\001\000\002\000\043\001\003\000\043\001\004\000\043\001\005\000\043\001\
\\014\000\043\001\017\000\139\000\020\000\043\001\022\000\043\001\
\\035\000\043\001\036\000\043\001\038\000\043\001\039\000\043\001\
\\042\000\043\001\043\000\043\001\044\000\043\001\045\000\043\001\
\\046\000\043\001\049\000\043\001\000\000\
\\001\000\002\000\044\001\003\000\044\001\004\000\044\001\005\000\044\001\
\\014\000\044\001\017\000\044\001\018\000\141\000\020\000\044\001\
\\022\000\044\001\030\000\140\000\035\000\044\001\036\000\044\001\
\\038\000\044\001\039\000\044\001\042\000\044\001\043\000\044\001\
\\044\000\044\001\045\000\044\001\046\000\044\001\049\000\044\001\000\000\
\\001\000\002\000\045\001\003\000\045\001\004\000\045\001\005\000\045\001\
\\014\000\045\001\017\000\045\001\018\000\141\000\020\000\045\001\
\\022\000\045\001\030\000\140\000\035\000\045\001\036\000\045\001\
\\038\000\045\001\039\000\045\001\042\000\045\001\043\000\045\001\
\\044\000\045\001\045\000\045\001\046\000\045\001\049\000\045\001\000\000\
\\001\000\002\000\046\001\003\000\046\001\004\000\046\001\005\000\046\001\
\\014\000\046\001\017\000\046\001\020\000\046\001\022\000\046\001\
\\035\000\046\001\036\000\046\001\038\000\046\001\039\000\046\001\
\\042\000\046\001\043\000\046\001\044\000\046\001\045\000\046\001\
\\046\000\046\001\049\000\046\001\000\000\
\\001\000\002\000\047\001\003\000\047\001\004\000\047\001\005\000\047\001\
\\014\000\047\001\017\000\047\001\018\000\047\001\020\000\047\001\
\\022\000\047\001\030\000\047\001\035\000\047\001\036\000\047\001\
\\038\000\047\001\039\000\047\001\042\000\047\001\043\000\047\001\
\\044\000\047\001\045\000\047\001\046\000\047\001\049\000\047\001\000\000\
\\001\000\002\000\048\001\003\000\048\001\004\000\048\001\005\000\048\001\
\\014\000\048\001\017\000\048\001\018\000\048\001\020\000\048\001\
\\022\000\048\001\030\000\048\001\035\000\048\001\036\000\048\001\
\\038\000\048\001\039\000\048\001\042\000\048\001\043\000\048\001\
\\044\000\048\001\045\000\048\001\046\000\048\001\049\000\048\001\000\000\
\\001\000\002\000\049\001\003\000\049\001\004\000\049\001\005\000\049\001\
\\014\000\049\001\017\000\049\001\018\000\049\001\020\000\049\001\
\\022\000\049\001\030\000\049\001\035\000\049\001\036\000\049\001\
\\038\000\049\001\039\000\049\001\042\000\049\001\043\000\049\001\
\\044\000\049\001\045\000\049\001\046\000\049\001\049\000\049\001\000\000\
\\001\000\002\000\050\001\003\000\050\001\004\000\050\001\005\000\050\001\
\\014\000\050\001\017\000\050\001\018\000\050\001\020\000\050\001\
\\022\000\050\001\030\000\050\001\035\000\050\001\036\000\050\001\
\\038\000\050\001\039\000\050\001\042\000\050\001\043\000\050\001\
\\044\000\050\001\045\000\050\001\046\000\050\001\049\000\050\001\000\000\
\\001\000\002\000\051\001\003\000\051\001\004\000\051\001\005\000\051\001\
\\014\000\051\001\017\000\051\001\018\000\051\001\020\000\051\001\
\\022\000\051\001\030\000\051\001\035\000\051\001\036\000\051\001\
\\038\000\051\001\039\000\051\001\042\000\051\001\043\000\051\001\
\\044\000\051\001\045\000\051\001\046\000\051\001\049\000\051\001\000\000\
\\001\000\002\000\103\000\048\000\030\001\000\000\
\\001\000\002\000\125\000\003\000\128\000\004\000\047\000\020\000\006\001\000\000\
\\001\000\002\000\125\000\004\000\047\000\020\000\006\001\022\000\006\001\000\000\
\\001\000\002\000\151\000\020\000\054\001\000\000\
\\001\000\002\000\174\000\020\000\026\001\000\000\
\\001\000\002\000\180\000\017\000\139\000\020\000\052\001\000\000\
\\001\000\002\000\180\000\017\000\139\000\020\000\179\000\000\000\
\\001\000\003\000\215\000\035\000\215\000\036\000\215\000\043\000\215\000\
\\044\000\215\000\045\000\215\000\046\000\215\000\049\000\215\000\000\000\
\\001\000\003\000\216\000\035\000\216\000\036\000\216\000\043\000\216\000\
\\044\000\216\000\045\000\216\000\046\000\216\000\049\000\216\000\000\000\
\\001\000\003\000\217\000\035\000\217\000\036\000\217\000\043\000\217\000\
\\044\000\217\000\045\000\217\000\046\000\217\000\049\000\217\000\000\000\
\\001\000\003\000\218\000\035\000\218\000\036\000\218\000\043\000\218\000\
\\044\000\218\000\045\000\218\000\046\000\218\000\049\000\218\000\000\000\
\\001\000\003\000\221\000\004\000\047\000\035\000\221\000\036\000\221\000\
\\043\000\221\000\044\000\221\000\045\000\221\000\046\000\221\000\
\\049\000\221\000\000\000\
\\001\000\003\000\222\000\004\000\047\000\035\000\222\000\036\000\222\000\
\\043\000\222\000\044\000\222\000\045\000\222\000\046\000\222\000\
\\049\000\222\000\000\000\
\\001\000\003\000\223\000\035\000\223\000\036\000\223\000\043\000\223\000\
\\044\000\223\000\045\000\223\000\046\000\223\000\049\000\223\000\000\000\
\\001\000\003\000\010\001\035\000\010\001\036\000\010\001\043\000\010\001\
\\044\000\010\001\045\000\010\001\046\000\010\001\049\000\010\001\000\000\
\\001\000\003\000\011\001\035\000\011\001\036\000\011\001\043\000\011\001\
\\044\000\011\001\045\000\011\001\046\000\011\001\049\000\011\001\000\000\
\\001\000\003\000\012\001\014\000\114\000\035\000\012\001\036\000\012\001\
\\043\000\012\001\044\000\012\001\045\000\012\001\046\000\012\001\
\\049\000\012\001\000\000\
\\001\000\003\000\013\001\004\000\047\000\014\000\013\001\035\000\013\001\
\\036\000\013\001\043\000\013\001\044\000\013\001\045\000\013\001\
\\046\000\013\001\049\000\013\001\000\000\
\\001\000\003\000\032\001\035\000\032\001\036\000\032\001\043\000\032\001\
\\044\000\032\001\045\000\032\001\046\000\032\001\049\000\032\001\000\000\
\\001\000\003\000\033\001\035\000\033\001\036\000\033\001\043\000\033\001\
\\044\000\033\001\045\000\033\001\046\000\033\001\049\000\033\001\000\000\
\\001\000\003\000\034\001\035\000\034\001\036\000\034\001\043\000\034\001\
\\044\000\034\001\045\000\034\001\046\000\034\001\049\000\034\001\000\000\
\\001\000\003\000\035\001\014\000\187\000\035\000\035\001\036\000\035\001\
\\043\000\035\001\044\000\035\001\045\000\035\001\046\000\035\001\
\\049\000\035\001\000\000\
\\001\000\003\000\036\001\035\000\036\001\036\000\036\001\043\000\036\001\
\\044\000\036\001\045\000\036\001\046\000\036\001\049\000\036\001\000\000\
\\001\000\003\000\037\001\014\000\037\001\035\000\037\001\036\000\037\001\
\\042\000\188\000\043\000\037\001\044\000\037\001\045\000\037\001\
\\046\000\037\001\049\000\037\001\000\000\
\\001\000\003\000\038\001\014\000\038\001\017\000\139\000\035\000\038\001\
\\036\000\038\001\043\000\038\001\044\000\038\001\045\000\038\001\
\\046\000\038\001\049\000\038\001\000\000\
\\001\000\003\000\039\001\017\000\139\000\035\000\039\001\036\000\039\001\
\\043\000\039\001\044\000\039\001\045\000\039\001\046\000\039\001\
\\049\000\039\001\000\000\
\\001\000\003\000\040\001\017\000\139\000\035\000\040\001\036\000\040\001\
\\043\000\040\001\044\000\040\001\045\000\040\001\046\000\040\001\
\\049\000\040\001\000\000\
\\001\000\003\000\041\001\017\000\139\000\035\000\041\001\036\000\041\001\
\\043\000\041\001\044\000\041\001\045\000\041\001\046\000\041\001\
\\049\000\041\001\000\000\
\\001\000\003\000\033\000\035\000\219\000\036\000\219\000\043\000\219\000\
\\044\000\219\000\045\000\219\000\046\000\219\000\049\000\219\000\000\000\
\\001\000\003\000\128\000\004\000\047\000\020\000\008\001\036\000\008\001\000\000\
\\001\000\003\000\128\000\004\000\047\000\036\000\195\000\000\000\
\\001\000\004\000\047\000\038\000\121\000\000\000\
\\001\000\004\000\047\000\039\000\193\000\000\000\
\\001\000\004\000\047\000\042\000\118\000\000\000\
\\001\000\004\000\047\000\049\000\211\000\000\000\
\\001\000\004\000\105\000\005\000\104\000\000\000\
\\001\000\005\000\028\001\019\000\081\000\021\000\080\000\030\000\079\000\
\\032\000\117\000\000\000\
\\001\000\005\000\029\001\000\000\
\\001\000\005\000\107\000\000\000\
\\001\000\005\000\111\000\000\000\
\\001\000\005\000\148\000\000\000\
\\001\000\005\000\152\000\000\000\
\\001\000\005\000\158\000\000\000\
\\001\000\005\000\182\000\017\000\139\000\000\000\
\\001\000\005\000\204\000\000\000\
\\001\000\013\000\130\000\000\000\
\\001\000\013\000\161\000\000\000\
\\001\000\013\000\205\000\000\000\
\\001\000\015\000\031\000\016\000\030\000\019\000\029\000\020\000\004\001\
\\021\000\028\000\024\000\027\000\025\000\026\000\029\000\025\000\
\\030\000\024\000\032\000\023\000\033\000\022\000\034\000\021\000\
\\037\000\020\000\040\000\019\000\041\000\018\000\000\000\
\\001\000\015\000\031\000\016\000\030\000\019\000\029\000\021\000\028\000\
\\022\000\004\001\024\000\027\000\025\000\026\000\029\000\025\000\
\\030\000\024\000\032\000\023\000\033\000\022\000\034\000\021\000\
\\037\000\020\000\040\000\019\000\041\000\018\000\000\000\
\\001\000\015\000\031\000\016\000\030\000\019\000\029\000\021\000\028\000\
\\024\000\027\000\025\000\026\000\029\000\025\000\030\000\024\000\
\\032\000\023\000\033\000\022\000\034\000\021\000\037\000\020\000\
\\040\000\019\000\041\000\018\000\000\000\
\\001\000\015\000\031\000\016\000\030\000\019\000\029\000\021\000\028\000\
\\024\000\027\000\025\000\026\000\029\000\025\000\030\000\024\000\
\\032\000\023\000\033\000\022\000\034\000\021\000\037\000\020\000\
\\040\000\019\000\041\000\018\000\043\000\017\000\044\000\016\000\
\\045\000\015\000\046\000\014\000\047\000\013\000\000\000\
\\001\000\015\000\031\000\019\000\029\000\021\000\028\000\024\000\027\000\
\\025\000\026\000\029\000\025\000\030\000\024\000\033\000\022\000\
\\034\000\021\000\000\000\
\\001\000\019\000\029\000\021\000\028\000\029\000\025\000\030\000\024\000\
\\033\000\022\000\034\000\021\000\000\000\
\\001\000\019\000\053\000\030\000\052\000\031\000\051\000\000\000\
\\001\000\019\000\056\000\030\000\055\000\031\000\054\000\000\000\
\\001\000\019\000\081\000\020\000\137\000\021\000\080\000\030\000\079\000\
\\032\000\078\000\000\000\
\\001\000\019\000\081\000\021\000\080\000\030\000\079\000\032\000\078\000\000\000\
\\001\000\019\000\081\000\021\000\080\000\030\000\079\000\032\000\117\000\000\000\
\\001\000\019\000\101\000\030\000\100\000\031\000\099\000\000\000\
\\001\000\019\000\120\000\030\000\119\000\000\000\
\\001\000\020\000\005\001\022\000\005\001\000\000\
\\001\000\020\000\007\001\022\000\007\001\000\000\
\\001\000\020\000\009\001\036\000\009\001\000\000\
\\001\000\020\000\027\001\000\000\
\\001\000\020\000\053\001\000\000\
\\001\000\020\000\055\001\000\000\
\\001\000\020\000\126\000\000\000\
\\001\000\020\000\127\000\000\000\
\\001\000\020\000\150\000\000\000\
\\001\000\020\000\156\000\000\000\
\\001\000\020\000\166\000\000\000\
\\001\000\020\000\173\000\000\000\
\\001\000\020\000\178\000\000\000\
\\001\000\020\000\192\000\000\000\
\\001\000\022\000\124\000\000\000\
\\001\000\022\000\134\000\000\000\
\\001\000\029\000\082\000\000\000\
\\001\000\030\000\049\000\000\000\
\\001\000\030\000\050\000\000\000\
\\001\000\030\000\059\000\000\000\
\\001\000\030\000\061\000\000\000\
\\001\000\030\000\106\000\000\000\
\\001\000\030\000\110\000\000\000\
\\001\000\030\000\162\000\000\000\
\\001\000\030\000\184\000\000\000\
\\001\000\030\000\189\000\000\000\
\\001\000\030\000\197\000\000\000\
\\001\000\031\000\109\000\000\000\
\\001\000\032\000\155\000\000\000\
\\001\000\035\000\213\000\036\000\213\000\043\000\017\000\044\000\016\000\
\\045\000\015\000\046\000\014\000\049\000\213\000\000\000\
\\001\000\035\000\214\000\036\000\214\000\049\000\214\000\000\000\
\\001\000\035\000\220\000\036\000\220\000\043\000\220\000\044\000\220\000\
\\045\000\220\000\046\000\220\000\049\000\220\000\000\000\
\\001\000\035\000\122\000\000\000\
\\001\000\036\000\181\000\000\000\
\\001\000\036\000\194\000\000\000\
\\001\000\043\000\017\000\044\000\016\000\045\000\015\000\046\000\014\000\000\000\
\\001\000\048\000\031\001\000\000\
\\001\000\048\000\102\000\000\000\
\\001\000\049\000\000\000\000\000\
\\001\000\049\000\210\000\000\000\
\\001\000\049\000\212\000\000\000\
\"
val actionRowNumbers =
"\110\000\159\000\087\000\069\000\
\\068\000\067\000\066\000\021\000\
\\008\000\000\000\093\000\137\000\
\\138\000\113\000\114\000\139\000\
\\109\000\140\000\109\000\155\000\
\\032\000\034\000\026\000\031\000\
\\112\000\112\000\108\000\107\000\
\\116\000\136\000\149\000\151\000\
\\022\000\111\000\111\000\111\000\
\\111\000\111\000\111\000\111\000\
\\111\000\111\000\111\000\111\000\
\\111\000\118\000\157\000\059\000\
\\094\000\141\000\097\000\147\000\
\\142\000\098\000\147\000\075\000\
\\072\000\117\000\092\000\119\000\
\\090\000\152\000\006\000\107\000\
\\024\000\025\000\134\000\120\000\
\\061\000\126\000\127\000\060\000\
\\046\000\104\000\038\000\002\000\
\\042\000\040\000\135\000\115\000\
\\112\000\150\000\018\000\017\000\
\\020\000\019\000\011\000\010\000\
\\009\000\013\000\015\000\014\000\
\\016\000\012\000\001\000\049\000\
\\051\000\055\000\054\000\118\000\
\\155\000\137\000\109\000\118\000\
\\099\000\118\000\128\000\062\000\
\\100\000\148\000\129\000\073\000\
\\139\000\101\000\095\000\041\000\
\\116\000\105\000\143\000\109\000\
\\109\000\130\000\033\000\109\000\
\\030\000\029\000\109\000\117\000\
\\109\000\036\000\116\000\047\000\
\\043\000\131\000\063\000\044\000\
\\023\000\118\000\057\000\118\000\
\\132\000\065\000\153\000\156\000\
\\070\000\102\000\118\000\084\000\
\\144\000\147\000\148\000\077\000\
\\080\000\082\000\145\000\074\000\
\\109\000\096\000\005\000\109\000\
\\133\000\091\000\154\000\089\000\
\\035\000\121\000\122\000\088\000\
\\048\000\039\000\037\000\045\000\
\\116\000\050\000\053\000\052\000\
\\146\000\056\000\118\000\160\000\
\\109\000\085\000\118\000\125\000\
\\078\000\148\000\118\000\103\000\
\\076\000\004\000\106\000\109\000\
\\028\000\027\000\123\000\058\000\
\\124\000\064\000\071\000\086\000\
\\081\000\083\000\148\000\109\000\
\\007\000\079\000\003\000\158\000"
val gotoT =
"\
\\003\000\010\000\004\000\009\000\005\000\008\000\006\000\007\000\
\\029\000\006\000\030\000\005\000\031\000\004\000\032\000\003\000\
\\033\000\002\000\034\000\001\000\036\000\207\000\000\000\
\\000\000\
\\035\000\030\000\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\006\000\032\000\000\000\
\\000\000\
\\000\000\
\\001\000\046\000\000\000\
\\000\000\
\\000\000\
\\000\000\
\\014\000\056\000\016\000\055\000\000\000\
\\003\000\058\000\004\000\009\000\005\000\008\000\006\000\007\000\000\000\
\\000\000\
\\003\000\060\000\004\000\009\000\005\000\008\000\006\000\007\000\000\000\
\\029\000\006\000\030\000\005\000\031\000\004\000\032\000\003\000\
\\033\000\002\000\034\000\061\000\000\000\
\\000\000\
\\009\000\062\000\000\000\
\\000\000\
\\000\000\
\\006\000\064\000\000\000\
\\006\000\065\000\000\000\
\\003\000\068\000\004\000\009\000\005\000\008\000\006\000\007\000\
\\007\000\067\000\008\000\066\000\000\000\
\\003\000\071\000\004\000\009\000\005\000\008\000\006\000\007\000\
\\007\000\067\000\008\000\070\000\010\000\069\000\000\000\
\\011\000\075\000\013\000\074\000\017\000\073\000\018\000\072\000\000\000\
\\000\000\
\\029\000\006\000\030\000\005\000\031\000\004\000\032\000\003\000\
\\033\000\002\000\034\000\081\000\000\000\
\\000\000\
\\000\000\
\\004\000\082\000\005\000\008\000\006\000\007\000\000\000\
\\004\000\083\000\005\000\008\000\006\000\007\000\000\000\
\\004\000\084\000\005\000\008\000\006\000\007\000\000\000\
\\004\000\085\000\005\000\008\000\006\000\007\000\000\000\
\\004\000\086\000\005\000\008\000\006\000\007\000\000\000\
\\004\000\087\000\005\000\008\000\006\000\007\000\000\000\
\\004\000\088\000\005\000\008\000\006\000\007\000\000\000\
\\004\000\089\000\005\000\008\000\006\000\007\000\000\000\
\\004\000\090\000\005\000\008\000\006\000\007\000\000\000\
\\004\000\091\000\005\000\008\000\006\000\007\000\000\000\
\\004\000\092\000\005\000\008\000\006\000\007\000\000\000\
\\004\000\093\000\005\000\008\000\006\000\007\000\000\000\
\\023\000\096\000\024\000\095\000\025\000\094\000\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\022\000\106\000\000\000\
\\000\000\
\\000\000\
\\022\000\110\000\000\000\
\\015\000\111\000\000\000\
\\000\000\
\\018\000\114\000\021\000\113\000\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\003\000\068\000\004\000\009\000\005\000\008\000\006\000\007\000\
\\007\000\067\000\008\000\121\000\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\012\000\129\000\000\000\
\\000\000\
\\018\000\131\000\000\000\
\\000\000\
\\000\000\
\\017\000\134\000\018\000\072\000\019\000\133\000\000\000\
\\006\000\136\000\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\023\000\096\000\024\000\095\000\025\000\141\000\026\000\140\000\000\000\
\\029\000\006\000\030\000\005\000\031\000\004\000\032\000\003\000\
\\033\000\002\000\034\000\142\000\000\000\
\\001\000\143\000\000\000\
\\003\000\144\000\004\000\009\000\005\000\008\000\006\000\007\000\000\000\
\\023\000\096\000\024\000\095\000\025\000\145\000\000\000\
\\000\000\
\\023\000\096\000\024\000\095\000\025\000\147\000\000\000\
\\000\000\
\\000\000\
\\000\000\
\\027\000\152\000\028\000\151\000\000\000\
\\000\000\
\\000\000\
\\014\000\155\000\016\000\055\000\000\000\
\\000\000\
\\018\000\114\000\021\000\157\000\000\000\
\\000\000\
\\011\000\158\000\013\000\074\000\017\000\073\000\018\000\072\000\000\000\
\\000\000\
\\000\000\
\\003\000\161\000\004\000\009\000\005\000\008\000\006\000\007\000\000\000\
\\003\000\163\000\004\000\009\000\005\000\008\000\006\000\007\000\
\\010\000\162\000\000\000\
\\000\000\
\\000\000\
\\003\000\068\000\004\000\009\000\005\000\008\000\006\000\007\000\
\\007\000\165\000\000\000\
\\000\000\
\\000\000\
\\003\000\167\000\004\000\009\000\005\000\008\000\006\000\007\000\
\\010\000\166\000\000\000\
\\018\000\168\000\000\000\
\\003\000\169\000\004\000\009\000\005\000\008\000\006\000\007\000\000\000\
\\000\000\
\\011\000\170\000\013\000\074\000\017\000\073\000\018\000\072\000\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\023\000\096\000\024\000\095\000\025\000\173\000\000\000\
\\000\000\
\\023\000\175\000\024\000\174\000\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\023\000\096\000\024\000\095\000\025\000\181\000\000\000\
\\000\000\
\\000\000\
\\022\000\183\000\000\000\
\\027\000\152\000\028\000\184\000\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\003\000\188\000\004\000\009\000\005\000\008\000\006\000\007\000\000\000\
\\000\000\
\\000\000\
\\003\000\189\000\004\000\009\000\005\000\008\000\006\000\007\000\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\017\000\134\000\018\000\072\000\019\000\194\000\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\023\000\096\000\024\000\095\000\025\000\197\000\026\000\196\000\000\000\
\\000\000\
\\003\000\198\000\004\000\009\000\005\000\008\000\006\000\007\000\000\000\
\\000\000\
\\023\000\096\000\024\000\095\000\025\000\199\000\000\000\
\\000\000\
\\000\000\
\\027\000\152\000\028\000\200\000\000\000\
\\023\000\096\000\024\000\095\000\025\000\201\000\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\003\000\204\000\004\000\009\000\005\000\008\000\006\000\007\000\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\027\000\152\000\028\000\205\000\000\000\
\\003\000\206\000\004\000\009\000\005\000\008\000\006\000\007\000\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\"
val numstates = 208
val numrules = 102
val s = ref "" and index = ref 0
val string_to_int = fn () => 
let val i = !index
in index := i+2; Char.ord(String.sub(!s,i)) + Char.ord(String.sub(!s,i+1)) * 256
end
val string_to_list = fn s' =>
    let val len = String.size s'
        fun f () =
           if !index < len then string_to_int() :: f()
           else nil
   in index := 0; s := s'; f ()
   end
val string_to_pairlist = fn (conv_key,conv_entry) =>
     let fun f () =
         case string_to_int()
         of 0 => EMPTY
          | n => PAIR(conv_key (n-1),conv_entry (string_to_int()),f())
     in f
     end
val string_to_pairlist_default = fn (conv_key,conv_entry) =>
    let val conv_row = string_to_pairlist(conv_key,conv_entry)
    in fn () =>
       let val default = conv_entry(string_to_int())
           val row = conv_row()
       in (row,default)
       end
   end
val string_to_table = fn (convert_row,s') =>
    let val len = String.size s'
        fun f ()=
           if !index < len then convert_row() :: f()
           else nil
     in (s := s'; index := 0; f ())
     end
local
  val memo = Array.array(numstates+numrules,ERROR)
  val _ =let fun g i=(Array.update(memo,i,REDUCE(i-numstates)); g(i+1))
       fun f i =
            if i=numstates then g i
            else (Array.update(memo,i,SHIFT (STATE i)); f (i+1))
          in f 0 handle Subscript => ()
          end
in
val entry_to_action = fn 0 => ACCEPT | 1 => ERROR | j => Array.sub(memo,(j-2))
end
val gotoT=Array.fromList(string_to_table(string_to_pairlist(NT,STATE),gotoT))
val actionRows=string_to_table(string_to_pairlist_default(T,entry_to_action),actionRows)
val actionRowNumbers = string_to_list actionRowNumbers
val actionT = let val actionRowLookUp=
let val a=Array.fromList(actionRows) in fn i=>Array.sub(a,i) end
in Array.fromList(map actionRowLookUp actionRowNumbers)
end
in LrTable.mkLrTable {actions=actionT,gotos=gotoT,numRules=numrules,
numStates=numstates,initialState=STATE 0}
end
end
local open Header in
type pos = { pos:int,src:Source.src } 
type arg = unit
structure MlyValue = 
struct
datatype svalue = VOID | ntVOID of unit ->  unit
 | STRING of unit ->  (string) | CONS of unit ->  (string)
 | TYID of unit ->  (string) | ID of unit ->  (string)
 | INTLIT of unit ->  (int) | Program of unit ->  (prog)
 | Bindings of unit ->  (bind list) | Binding of unit ->  (bind)
 | TyBind of unit ->  (bind) | DatBind of unit ->  (bind)
 | FunBind of unit ->  (bind) | ValBind of unit ->  (bind)
 | ConBinds of unit ->  (MiniML.conbind list)
 | ConBind of unit ->  (MiniML.conbind)
 | TyExpSeq of unit ->  (MiniML.tyexp list)
 | TyExp of unit ->  (MiniML.tyexp)
 | TupleTyExp of unit ->  (MiniML.tyexp list)
 | AtTyExp of unit ->  (MiniML.tyexp)
 | TyIds of unit ->  (string list) | AtPatterns of unit ->  (pat list)
 | PatternListOpt of unit ->  (pat list)
 | PatternList of unit ->  (pat list) | AtPattern of unit ->  (pat)
 | Pattern of unit ->  (pat)
 | FRule of unit ->  (string* ( pat list * exp ) )
 | FBarRuleOpt of unit ->  ( ( string * (pat list * exp) )  list)
 | FMatch of unit ->  ( ( string * (pat list * exp) )  list)
 | Rule of unit ->  (pat*exp)
 | BarRuleOpt of unit ->  ( ( pat * exp )  list)
 | PMatch of unit ->  ( ( pat * exp )  list)
 | ExpSemiList of unit ->  (exp list)
 | ParenExpListOpt of unit ->  (exp list)
 | ExpListOpt of unit ->  (exp list) | ExpList of unit ->  (exp list)
 | AtExp of unit ->  (exp) | AppExp of unit ->  (exp)
 | OpExp of unit ->  (exp) | Exp of unit ->  (exp)
 | IdListOpt of unit ->  (string list)
 | IdList of unit ->  (string list)
end
type svalue = MlyValue.svalue
type result = prog
end
structure EC=
struct
open LrTable
infix 5 $$
fun x $$ y = y::x
val is_keyword =
fn (T 33) => true | (T 34) => true | (T 35) => true | (T 36) => true
 | (T 37) => true | (T 38) => true | (T 39) => true | (T 40) => true
 | (T 41) => true | (T 42) => true | (T 43) => true | (T 44) => true
 | (T 45) => true | (T 46) => true | (T 47) => true | _ => false
val preferred_change : (term list * term list) list = 
nil
val noShift = 
fn (T 48) => true | _ => false
val showTerminal =
fn (T 0) => "PERIOD"
  | (T 1) => "COMMA"
  | (T 2) => "SEMICOLON"
  | (T 3) => "COLON"
  | (T 4) => "EQ"
  | (T 5) => "GE"
  | (T 6) => "LE"
  | (T 7) => "GT"
  | (T 8) => "LT"
  | (T 9) => "PLUS"
  | (T 10) => "MINUS"
  | (T 11) => "DIV"
  | (T 12) => "DARROW"
  | (T 13) => "BAR"
  | (T 14) => "HASH"
  | (T 15) => "LAMBDA"
  | (T 16) => "ARROW"
  | (T 17) => "ASTERISK"
  | (T 18) => "LPAREN"
  | (T 19) => "RPAREN"
  | (T 20) => "LBRACKET"
  | (T 21) => "RBRACKET"
  | (T 22) => "COLONCOLON"
  | (T 23) => "REF"
  | (T 24) => "BANG"
  | (T 25) => "ASSIGN"
  | (T 26) => "HAT"
  | (T 27) => "AT"
  | (T 28) => "INTLIT"
  | (T 29) => "ID"
  | (T 30) => "TYID"
  | (T 31) => "CONS"
  | (T 32) => "STRING"
  | (T 33) => "LET"
  | (T 34) => "IN"
  | (T 35) => "END"
  | (T 36) => "IF"
  | (T 37) => "THEN"
  | (T 38) => "ELSE"
  | (T 39) => "FIX"
  | (T 40) => "CASE"
  | (T 41) => "OF"
  | (T 42) => "FUN"
  | (T 43) => "DATATYPE"
  | (T 44) => "TYPE"
  | (T 45) => "VAL"
  | (T 46) => "EXPORT"
  | (T 47) => "FROM"
  | (T 48) => "EOF"
  | _ => "bogus-term"
local open Header in
val errtermvalue=
fn _ => MlyValue.VOID
end
val terms : term list = nil
 $$ (T 48) $$ (T 47) $$ (T 46) $$ (T 45) $$ (T 44) $$ (T 43) $$ (T 42)
 $$ (T 41) $$ (T 40) $$ (T 39) $$ (T 38) $$ (T 37) $$ (T 36) $$ (T 35)
 $$ (T 34) $$ (T 33) $$ (T 27) $$ (T 26) $$ (T 25) $$ (T 24) $$ (T 23)
 $$ (T 22) $$ (T 21) $$ (T 20) $$ (T 19) $$ (T 18) $$ (T 17) $$ (T 16)
 $$ (T 15) $$ (T 14) $$ (T 13) $$ (T 12) $$ (T 11) $$ (T 10) $$ (T 9)
 $$ (T 8) $$ (T 7) $$ (T 6) $$ (T 5) $$ (T 4) $$ (T 3) $$ (T 2) $$ (T 
1) $$ (T 0)end
structure Actions =
struct 
exception mlyAction of int
local open Header in
val actions = 
fn (i392,defaultPos,stack,
    (()):arg) =>
case (i392,stack)
of  ( 0, ( ( _, ( MlyValue.Bindings Bindings1, Bindings1left, 
Bindings1right)) :: rest671)) => let val  result = MlyValue.Program
 (fn _ => let val  (Bindings as Bindings1) = Bindings1 ()
 in (A.Export(boundIds Bindings, Bindings))
end)
 in ( LrTable.NT 35, ( result, Bindings1left, Bindings1right), rest671
)
end
|  ( 1, ( ( _, ( MlyValue.Exp Exp1, Exp1left, Exp1right)) :: rest671))
 => let val  result = MlyValue.Program (fn _ => let val  (Exp as Exp1)
 = Exp1 ()
 in (A.Export(["_"],[A.ValBind("_", Exp)]))
end)
 in ( LrTable.NT 35, ( result, Exp1left, Exp1right), rest671)
end
|  ( 2, ( ( _, ( _, _, END1right)) :: ( _, ( MlyValue.Bindings 
Bindings1, _, _)) :: _ :: ( _, ( MlyValue.IdList IdList1, _, _)) :: (
 _, ( _, EXPORT1left, _)) :: rest671)) => let val  result = 
MlyValue.Program (fn _ => let val  (IdList as IdList1) = IdList1 ()
 val  (Bindings as Bindings1) = Bindings1 ()
 in (A.Export(IdList, Bindings))
end)
 in ( LrTable.NT 35, ( result, EXPORT1left, END1right), rest671)
end
|  ( 3, ( ( _, ( MlyValue.ntVOID SemiOpt1, _, SemiOpt1right)) :: ( _, 
( MlyValue.Binding Binding1, Binding1left, _)) :: rest671)) => let
 val  result = MlyValue.Bindings (fn _ => let val  (Binding as 
Binding1) = Binding1 ()
 val  SemiOpt1 = SemiOpt1 ()
 in ([Binding])
end)
 in ( LrTable.NT 33, ( result, Binding1left, SemiOpt1right), rest671)

end
|  ( 4, ( ( _, ( MlyValue.Bindings Bindings1, _, Bindings1right)) :: (
 _, ( MlyValue.ntVOID SemiOpt1, _, _)) :: ( _, ( MlyValue.Binding 
Binding1, Binding1left, _)) :: rest671)) => let val  result = 
MlyValue.Bindings (fn _ => let val  (Binding as Binding1) = Binding1
 ()
 val  SemiOpt1 = SemiOpt1 ()
 val  (Bindings as Bindings1) = Bindings1 ()
 in (Binding::Bindings)
end)
 in ( LrTable.NT 33, ( result, Binding1left, Bindings1right), rest671)

end
|  ( 5, ( ( _, ( MlyValue.ValBind ValBind1, ValBind1left, 
ValBind1right)) :: rest671)) => let val  result = MlyValue.Binding (fn
 _ => let val  (ValBind as ValBind1) = ValBind1 ()
 in (ValBind)
end)
 in ( LrTable.NT 32, ( result, ValBind1left, ValBind1right), rest671)

end
|  ( 6, ( ( _, ( MlyValue.FunBind FunBind1, FunBind1left, 
FunBind1right)) :: rest671)) => let val  result = MlyValue.Binding (fn
 _ => let val  (FunBind as FunBind1) = FunBind1 ()
 in (FunBind)
end)
 in ( LrTable.NT 32, ( result, FunBind1left, FunBind1right), rest671)

end
|  ( 7, ( ( _, ( MlyValue.DatBind DatBind1, DatBind1left, 
DatBind1right)) :: rest671)) => let val  result = MlyValue.Binding (fn
 _ => let val  (DatBind as DatBind1) = DatBind1 ()
 in (DatBind)
end)
 in ( LrTable.NT 32, ( result, DatBind1left, DatBind1right), rest671)

end
|  ( 8, ( ( _, ( MlyValue.TyBind TyBind1, TyBind1left, TyBind1right))
 :: rest671)) => let val  result = MlyValue.Binding (fn _ => let val 
 (TyBind as TyBind1) = TyBind1 ()
 in (TyBind)
end)
 in ( LrTable.NT 32, ( result, TyBind1left, TyBind1right), rest671)

end
|  ( 9, ( rest671)) => let val  result = MlyValue.ntVOID (fn _ => ())
 in ( LrTable.NT 34, ( result, defaultPos, defaultPos), rest671)
end
|  ( 10, ( ( _, ( _, SEMICOLON1left, SEMICOLON1right)) :: rest671)) =>
 let val  result = MlyValue.ntVOID (fn _ => ())
 in ( LrTable.NT 34, ( result, SEMICOLON1left, SEMICOLON1right), 
rest671)
end
|  ( 11, ( ( _, ( MlyValue.Exp Exp1, _, Exp1right)) :: _ :: ( _, ( 
MlyValue.ID ID1, _, _)) :: ( _, ( _, VAL1left, _)) :: rest671)) => let
 val  result = MlyValue.ValBind (fn _ => let val  (ID as ID1) = ID1 ()
 val  (Exp as Exp1) = Exp1 ()
 in (A.ValBind(ID,Exp))
end)
 in ( LrTable.NT 28, ( result, VAL1left, Exp1right), rest671)
end
|  ( 12, ( ( _, ( MlyValue.Exp Exp1, _, Exp1right)) :: _ :: ( _, ( 
MlyValue.TyExp TyExp1, _, _)) :: _ :: ( _, ( MlyValue.ID ID1, _, _))
 :: ( _, ( _, VAL1left, _)) :: rest671)) => let val  result = 
MlyValue.ValBind (fn _ => let val  (ID as ID1) = ID1 ()
 val  TyExp1 = TyExp1 ()
 val  (Exp as Exp1) = Exp1 ()
 in (A.ValBind(ID,Exp))
end)
 in ( LrTable.NT 28, ( result, VAL1left, Exp1right), rest671)
end
|  ( 13, ( ( _, ( MlyValue.FMatch FMatch1, _, (FMatchright as 
FMatch1right))) :: ( _, ( _, (FUNleft as FUN1left), _)) :: rest671))
 => let val  result = MlyValue.FunBind (fn _ => let val  (FMatch as 
FMatch1) = FMatch1 ()
 in (mk_fun (FUNleft,FMatchright) FMatch)
end)
 in ( LrTable.NT 29, ( result, FUN1left, FMatch1right), rest671)
end
|  ( 14, ( ( _, ( MlyValue.OpExp OpExp1, OpExp1left, OpExp1right)) :: 
rest671)) => let val  result = MlyValue.Exp (fn _ => let val  (OpExp
 as OpExp1) = OpExp1 ()
 in (OpExp)
end)
 in ( LrTable.NT 2, ( result, OpExp1left, OpExp1right), rest671)
end
|  ( 15, ( ( _, ( MlyValue.TyExp TyExp1, _, TyExp1right)) :: _ :: ( _,
 ( MlyValue.Exp Exp1, Exp1left, _)) :: rest671)) => let val  result = 
MlyValue.Exp (fn _ => let val  (Exp as Exp1) = Exp1 ()
 val  TyExp1 = TyExp1 ()
 in (Exp)
end)
 in ( LrTable.NT 2, ( result, Exp1left, TyExp1right), rest671)
end
|  ( 16, ( ( _, ( MlyValue.PMatch PMatch1, _, (PMatchright as 
PMatch1right))) :: ( _, ( _, (LAMBDAleft as LAMBDA1left), _)) :: 
rest671)) => let val  result = MlyValue.Exp (fn _ => let val  (PMatch
 as PMatch1) = PMatch1 ()
 in (
case PMatch of
					     [(P.PVar x,e)] => A.Info(mk_info (LAMBDAleft,PMatchright), A.Abs(x,e))
					   | match => A.Abs("_x", mk_case (LAMBDAleft,PMatchright) (A.Var "_x") match)
					
)
end)
 in ( LrTable.NT 2, ( result, LAMBDA1left, PMatch1right), rest671)
end
|  ( 17, ( ( _, ( MlyValue.Exp Exp1, _, (Expright as Exp1right))) :: _
 :: _ :: ( _, ( MlyValue.ID ID2, _, _)) :: _ :: ( _, ( MlyValue.ID ID1
, _, _)) :: ( _, ( _, (FIXleft as FIX1left), _)) :: rest671)) => let
 val  result = MlyValue.Exp (fn _ => let val  ID1 = ID1 ()
 val  ID2 = ID2 ()
 val  (Exp as Exp1) = Exp1 ()
 in (A.Info(mk_info (FIXleft,Expright),A.Fix(ID1,ID2,Exp)))
end)
 in ( LrTable.NT 2, ( result, FIX1left, Exp1right), rest671)
end
|  ( 18, ( ( _, ( MlyValue.Exp Exp1, _, Exp1right)) :: _ :: ( _, ( 
MlyValue.ID ID2, _, _)) :: ( _, ( MlyValue.ID ID1, _, _)) :: ( _, ( _,
 FIX1left, _)) :: rest671)) => let val  result = MlyValue.Exp (fn _ =>
 let val  ID1 = ID1 ()
 val  ID2 = ID2 ()
 val  (Exp as Exp1) = Exp1 ()
 in (A.Fix(ID1,ID2,Exp))
end)
 in ( LrTable.NT 2, ( result, FIX1left, Exp1right), rest671)
end
|  ( 19, ( ( _, ( MlyValue.PMatch PMatch1, _, (PMatchright as 
PMatch1right))) :: _ :: ( _, ( MlyValue.Exp Exp1, _, _)) :: ( _, ( _,
 (CASEleft as CASE1left), _)) :: rest671)) => let val  result = 
MlyValue.Exp (fn _ => let val  (Exp as Exp1) = Exp1 ()
 val  (PMatch as PMatch1) = PMatch1 ()
 in (mk_case (CASEleft,PMatchright) Exp PMatch)
end)
 in ( LrTable.NT 2, ( result, CASE1left, PMatch1right), rest671)
end
|  ( 20, ( ( _, ( MlyValue.ParenExpListOpt ParenExpListOpt1, _, 
ParenExpListOpt1right)) :: ( _, ( MlyValue.CONS CONS1, CONS1left, _))
 :: rest671)) => let val  result = MlyValue.Exp (fn _ => let val  (
CONS as CONS1) = CONS1 ()
 val  (ParenExpListOpt as ParenExpListOpt1) = ParenExpListOpt1 ()
 in (
case ParenExpListOpt of
					     [] => A.Const(CONS,A.Unit)
					   | [e] => A.Const(CONS,e)
					   | es => A.Const(CONS,A.Tuple es)
                                        
)
end)
 in ( LrTable.NT 2, ( result, CONS1left, ParenExpListOpt1right), 
rest671)
end
|  ( 21, ( ( _, ( MlyValue.Exp Exp3, _, Exp3right)) :: _ :: ( _, ( 
MlyValue.Exp Exp2, _, _)) :: _ :: ( _, ( MlyValue.Exp Exp1, _, _)) :: 
( _, ( _, IF1left, _)) :: rest671)) => let val  result = MlyValue.Exp
 (fn _ => let val  Exp1 = Exp1 ()
 val  Exp2 = Exp2 ()
 val  Exp3 = Exp3 ()
 in (
A.Case(Exp1,
					        [ (P.PCon(TRUEcon,nullCarg), Exp2)
					        , (P.PCon(FALSEcon,nullCarg), Exp3)
                                                ])
)
end)
 in ( LrTable.NT 2, ( result, IF1left, Exp3right), rest671)
end
|  ( 22, ( ( _, ( MlyValue.AppExp AppExp1, (AppExpleft as AppExp1left)
, (AppExpright as AppExp1right))) :: rest671)) => let val  result = 
MlyValue.OpExp (fn _ => let val  (AppExp as AppExp1) = AppExp1 ()
 in (A.Info(mk_info (AppExpleft,AppExpright),AppExp))
end)
 in ( LrTable.NT 3, ( result, AppExp1left, AppExp1right), rest671)
end
|  ( 23, ( ( _, ( MlyValue.OpExp OpExp2, _, OpExp2right)) :: _ :: ( _,
 ( MlyValue.OpExp OpExp1, OpExp1left, _)) :: rest671)) => let val  
result = MlyValue.OpExp (fn _ => let val  OpExp1 = OpExp1 ()
 val  OpExp2 = OpExp2 ()
 in (mk_aprim "+" OpExp1 OpExp2)
end)
 in ( LrTable.NT 3, ( result, OpExp1left, OpExp2right), rest671)
end
|  ( 24, ( ( _, ( MlyValue.OpExp OpExp2, _, OpExp2right)) :: _ :: ( _,
 ( MlyValue.OpExp OpExp1, OpExp1left, _)) :: rest671)) => let val  
result = MlyValue.OpExp (fn _ => let val  OpExp1 = OpExp1 ()
 val  OpExp2 = OpExp2 ()
 in (mk_aprim "-" OpExp1 OpExp2)
end)
 in ( LrTable.NT 3, ( result, OpExp1left, OpExp2right), rest671)
end
|  ( 25, ( ( _, ( MlyValue.OpExp OpExp2, _, OpExp2right)) :: _ :: ( _,
 ( MlyValue.OpExp OpExp1, OpExp1left, _)) :: rest671)) => let val  
result = MlyValue.OpExp (fn _ => let val  OpExp1 = OpExp1 ()
 val  OpExp2 = OpExp2 ()
 in (mk_aprim "*" OpExp1 OpExp2)
end)
 in ( LrTable.NT 3, ( result, OpExp1left, OpExp2right), rest671)
end
|  ( 26, ( ( _, ( MlyValue.OpExp OpExp2, _, OpExp2right)) :: _ :: ( _,
 ( MlyValue.OpExp OpExp1, OpExp1left, _)) :: rest671)) => let val  
result = MlyValue.OpExp (fn _ => let val  OpExp1 = OpExp1 ()
 val  OpExp2 = OpExp2 ()
 in (mk_rprim "=" OpExp1 OpExp2)
end)
 in ( LrTable.NT 3, ( result, OpExp1left, OpExp2right), rest671)
end
|  ( 27, ( ( _, ( MlyValue.OpExp OpExp2, _, OpExp2right)) :: _ :: ( _,
 ( MlyValue.OpExp OpExp1, OpExp1left, _)) :: rest671)) => let val  
result = MlyValue.OpExp (fn _ => let val  OpExp1 = OpExp1 ()
 val  OpExp2 = OpExp2 ()
 in (mk_rprim "<" OpExp1 OpExp2)
end)
 in ( LrTable.NT 3, ( result, OpExp1left, OpExp2right), rest671)
end
|  ( 28, ( ( _, ( MlyValue.OpExp OpExp2, _, OpExp2right)) :: _ :: ( _,
 ( MlyValue.OpExp OpExp1, OpExp1left, _)) :: rest671)) => let val  
result = MlyValue.OpExp (fn _ => let val  OpExp1 = OpExp1 ()
 val  OpExp2 = OpExp2 ()
 in (mk_rprim "<=" OpExp1 OpExp2)
end)
 in ( LrTable.NT 3, ( result, OpExp1left, OpExp2right), rest671)
end
|  ( 29, ( ( _, ( MlyValue.OpExp OpExp2, _, OpExp2right)) :: _ :: ( _,
 ( MlyValue.OpExp OpExp1, OpExp1left, _)) :: rest671)) => let val  
result = MlyValue.OpExp (fn _ => let val  OpExp1 = OpExp1 ()
 val  OpExp2 = OpExp2 ()
 in (mk_rprim "<" OpExp1 OpExp2)
end)
 in ( LrTable.NT 3, ( result, OpExp1left, OpExp2right), rest671)
end
|  ( 30, ( ( _, ( MlyValue.OpExp OpExp2, _, OpExp2right)) :: _ :: ( _,
 ( MlyValue.OpExp OpExp1, OpExp1left, _)) :: rest671)) => let val  
result = MlyValue.OpExp (fn _ => let val  OpExp1 = OpExp1 ()
 val  OpExp2 = OpExp2 ()
 in (mk_rprim "<=" OpExp1 OpExp2)
end)
 in ( LrTable.NT 3, ( result, OpExp1left, OpExp2right), rest671)
end
|  ( 31, ( ( _, ( MlyValue.OpExp OpExp2, _, OpExp2right)) :: _ :: ( _,
 ( MlyValue.OpExp OpExp1, OpExp1left, _)) :: rest671)) => let val  
result = MlyValue.OpExp (fn _ => let val  OpExp1 = OpExp1 ()
 val  OpExp2 = OpExp2 ()
 in (mk_aprim "^" OpExp1 OpExp2)
end)
 in ( LrTable.NT 3, ( result, OpExp1left, OpExp2right), rest671)
end
|  ( 32, ( ( _, ( MlyValue.OpExp OpExp2, _, OpExp2right)) :: _ :: ( _,
 ( MlyValue.OpExp OpExp1, OpExp1left, _)) :: rest671)) => let val  
result = MlyValue.OpExp (fn _ => let val  OpExp1 = OpExp1 ()
 val  OpExp2 = OpExp2 ()
 in (mk_aprim "@" OpExp1 OpExp2)
end)
 in ( LrTable.NT 3, ( result, OpExp1left, OpExp2right), rest671)
end
|  ( 33, ( ( _, ( MlyValue.OpExp OpExp2, _, OpExp2right)) :: _ :: ( _,
 ( MlyValue.OpExp OpExp1, OpExp1left, _)) :: rest671)) => let val  
result = MlyValue.OpExp (fn _ => let val  OpExp1 = OpExp1 ()
 val  OpExp2 = OpExp2 ()
 in (A.Const("Cons",A.Tuple [OpExp1,OpExp2]))
end)
 in ( LrTable.NT 3, ( result, OpExp1left, OpExp2right), rest671)
end
|  ( 34, ( ( _, ( MlyValue.OpExp OpExp2, _, OpExp2right)) :: _ :: ( _,
 ( MlyValue.OpExp OpExp1, OpExp1left, _)) :: rest671)) => let val  
result = MlyValue.OpExp (fn _ => let val  OpExp1 = OpExp1 ()
 val  OpExp2 = OpExp2 ()
 in (A.Assign(OpExp1, OpExp2))
end)
 in ( LrTable.NT 3, ( result, OpExp1left, OpExp2right), rest671)
end
|  ( 35, ( ( _, ( MlyValue.AtExp AtExp1, (AtExpleft as AtExp1left), (
AtExpright as AtExp1right))) :: rest671)) => let val  result = 
MlyValue.AppExp (fn _ => let val  (AtExp as AtExp1) = AtExp1 ()
 in (A.Info(mk_info (AtExpleft,AtExpright),AtExp))
end)
 in ( LrTable.NT 4, ( result, AtExp1left, AtExp1right), rest671)
end
|  ( 36, ( ( _, ( MlyValue.AtExp AtExp1, _, AtExp1right)) :: ( _, ( 
MlyValue.AppExp AppExp1, AppExp1left, _)) :: rest671)) => let val  
result = MlyValue.AppExp (fn _ => let val  (AppExp as AppExp1) = 
AppExp1 ()
 val  (AtExp as AtExp1) = AtExp1 ()
 in (A.App(AppExp,AtExp))
end)
 in ( LrTable.NT 4, ( result, AppExp1left, AtExp1right), rest671)
end
|  ( 37, ( ( _, ( MlyValue.AtExp AtExp1, _, AtExp1right)) :: ( _, ( 
MlyValue.INTLIT INTLIT1, _, _)) :: ( _, ( _, HASH1left, _)) :: rest671
)) => let val  result = MlyValue.AppExp (fn _ => let val  (INTLIT as 
INTLIT1) = INTLIT1 ()
 val  (AtExp as AtExp1) = AtExp1 ()
 in (A.Proj(INTLIT, AtExp))
end)
 in ( LrTable.NT 4, ( result, HASH1left, AtExp1right), rest671)
end
|  ( 38, ( ( _, ( MlyValue.AtExp AtExp1, _, AtExp1right)) :: ( _, ( _,
 BANG1left, _)) :: rest671)) => let val  result = MlyValue.AppExp (fn
 _ => let val  (AtExp as AtExp1) = AtExp1 ()
 in (A.DeRef AtExp)
end)
 in ( LrTable.NT 4, ( result, BANG1left, AtExp1right), rest671)
end
|  ( 39, ( ( _, ( MlyValue.AtExp AtExp1, _, AtExp1right)) :: ( _, ( _,
 REF1left, _)) :: rest671)) => let val  result = MlyValue.AppExp (fn _
 => let val  (AtExp as AtExp1) = AtExp1 ()
 in (A.Ref AtExp)
end)
 in ( LrTable.NT 4, ( result, REF1left, AtExp1right), rest671)
end
|  ( 40, ( ( _, ( MlyValue.ID ID1, ID1left, ID1right)) :: rest671)) =>
 let val  result = MlyValue.AtExp (fn _ => let val  (ID as ID1) = ID1
 ()
 in (A.Var ID)
end)
 in ( LrTable.NT 5, ( result, ID1left, ID1right), rest671)
end
|  ( 41, ( ( _, ( _, _, END1right)) :: ( _, ( MlyValue.Exp Exp1, _, _)
) :: _ :: ( _, ( MlyValue.Bindings Bindings1, _, _)) :: ( _, ( _, 
LET1left, _)) :: rest671)) => let val  result = MlyValue.AtExp (fn _
 => let val  (Bindings as Bindings1) = Bindings1 ()
 val  (Exp as Exp1) = Exp1 ()
 in (A.mkLet Bindings Exp)
end)
 in ( LrTable.NT 5, ( result, LET1left, END1right), rest671)
end
|  ( 42, ( ( _, ( _, _, END1right)) :: ( _, ( MlyValue.ExpSemiList 
ExpSemiList1, _, _)) :: _ :: ( _, ( MlyValue.Bindings Bindings1, _, _)
) :: ( _, ( _, LET1left, _)) :: rest671)) => let val  result = 
MlyValue.AtExp (fn _ => let val  (Bindings as Bindings1) = Bindings1
 ()
 val  (ExpSemiList as ExpSemiList1) = ExpSemiList1 ()
 in (A.mkLet Bindings (mk_seq ExpSemiList))
end)
 in ( LrTable.NT 5, ( result, LET1left, END1right), rest671)
end
|  ( 43, ( ( _, ( _, _, RPAREN1right)) :: ( _, ( MlyValue.ExpListOpt 
ExpListOpt1, _, _)) :: ( _, ( _, LPAREN1left, _)) :: rest671)) => let
 val  result = MlyValue.AtExp (fn _ => let val  (ExpListOpt as 
ExpListOpt1) = ExpListOpt1 ()
 in (
case ExpListOpt of
						 [] => A.Unit
					       | [e] => e
					       | es => A.Tuple es
					
)
end)
 in ( LrTable.NT 5, ( result, LPAREN1left, RPAREN1right), rest671)
end
|  ( 44, ( ( _, ( _, _, RPAREN1right)) :: ( _, ( MlyValue.ExpSemiList 
ExpSemiList1, _, _)) :: ( _, ( _, LPAREN1left, _)) :: rest671)) => let
 val  result = MlyValue.AtExp (fn _ => let val  (ExpSemiList as 
ExpSemiList1) = ExpSemiList1 ()
 in (mk_seq ExpSemiList)
end)
 in ( LrTable.NT 5, ( result, LPAREN1left, RPAREN1right), rest671)
end
|  ( 45, ( ( _, ( MlyValue.INTLIT INTLIT1, INTLIT1left, INTLIT1right))
 :: rest671)) => let val  result = MlyValue.AtExp (fn _ => let val  (
INTLIT as INTLIT1) = INTLIT1 ()
 in (mk_int INTLIT)
end)
 in ( LrTable.NT 5, ( result, INTLIT1left, INTLIT1right), rest671)
end
|  ( 46, ( ( _, ( MlyValue.STRING STRING1, STRING1left, STRING1right))
 :: rest671)) => let val  result = MlyValue.AtExp (fn _ => let val  (
STRING as STRING1) = STRING1 ()
 in (mk_string STRING)
end)
 in ( LrTable.NT 5, ( result, STRING1left, STRING1right), rest671)
end
|  ( 47, ( ( _, ( _, _, RBRACKET1right)) :: ( _, ( MlyValue.ExpListOpt
 ExpListOpt1, _, _)) :: ( _, ( _, LBRACKET1left, _)) :: rest671)) =>
 let val  result = MlyValue.AtExp (fn _ => let val  (ExpListOpt as 
ExpListOpt1) = ExpListOpt1 ()
 in (mk_list ExpListOpt)
end)
 in ( LrTable.NT 5, ( result, LBRACKET1left, RBRACKET1right), rest671)

end
|  ( 48, ( rest671)) => let val  result = MlyValue.ParenExpListOpt (fn
 _ => ([]))
 in ( LrTable.NT 8, ( result, defaultPos, defaultPos), rest671)
end
|  ( 49, ( ( _, ( _, _, RPAREN1right)) :: ( _, ( MlyValue.ExpListOpt 
ExpListOpt1, _, _)) :: ( _, ( _, LPAREN1left, _)) :: rest671)) => let
 val  result = MlyValue.ParenExpListOpt (fn _ => let val  (ExpListOpt
 as ExpListOpt1) = ExpListOpt1 ()
 in (ExpListOpt)
end)
 in ( LrTable.NT 8, ( result, LPAREN1left, RPAREN1right), rest671)
end
|  ( 50, ( rest671)) => let val  result = MlyValue.ExpListOpt (fn _ =>
 ([]))
 in ( LrTable.NT 7, ( result, defaultPos, defaultPos), rest671)
end
|  ( 51, ( ( _, ( MlyValue.ExpList ExpList1, ExpList1left, 
ExpList1right)) :: rest671)) => let val  result = MlyValue.ExpListOpt
 (fn _ => let val  (ExpList as ExpList1) = ExpList1 ()
 in (ExpList)
end)
 in ( LrTable.NT 7, ( result, ExpList1left, ExpList1right), rest671)

end
|  ( 52, ( ( _, ( MlyValue.Exp Exp1, Exp1left, Exp1right)) :: rest671)
) => let val  result = MlyValue.ExpList (fn _ => let val  (Exp as Exp1
) = Exp1 ()
 in ([Exp])
end)
 in ( LrTable.NT 6, ( result, Exp1left, Exp1right), rest671)
end
|  ( 53, ( ( _, ( MlyValue.ExpList ExpList1, _, ExpList1right)) :: _
 :: ( _, ( MlyValue.Exp Exp1, Exp1left, _)) :: rest671)) => let val  
result = MlyValue.ExpList (fn _ => let val  (Exp as Exp1) = Exp1 ()
 val  (ExpList as ExpList1) = ExpList1 ()
 in (Exp::ExpList)
end)
 in ( LrTable.NT 6, ( result, Exp1left, ExpList1right), rest671)
end
|  ( 54, ( ( _, ( MlyValue.Exp Exp2, _, Exp2right)) :: _ :: ( _, ( 
MlyValue.Exp Exp1, Exp1left, _)) :: rest671)) => let val  result = 
MlyValue.ExpSemiList (fn _ => let val  Exp1 = Exp1 ()
 val  Exp2 = Exp2 ()
 in ([Exp1,Exp2])
end)
 in ( LrTable.NT 9, ( result, Exp1left, Exp2right), rest671)
end
|  ( 55, ( ( _, ( MlyValue.ExpSemiList ExpSemiList1, _, 
ExpSemiList1right)) :: _ :: ( _, ( MlyValue.Exp Exp1, Exp1left, _)) ::
 rest671)) => let val  result = MlyValue.ExpSemiList (fn _ => let val 
 (Exp as Exp1) = Exp1 ()
 val  (ExpSemiList as ExpSemiList1) = ExpSemiList1 ()
 in (Exp::ExpSemiList)
end)
 in ( LrTable.NT 9, ( result, Exp1left, ExpSemiList1right), rest671)

end
|  ( 56, ( ( _, ( MlyValue.FBarRuleOpt FBarRuleOpt1, _, 
FBarRuleOpt1right)) :: ( _, ( MlyValue.FRule FRule1, FRule1left, _))
 :: rest671)) => let val  result = MlyValue.FMatch (fn _ => let val  (
FRule as FRule1) = FRule1 ()
 val  (FBarRuleOpt as FBarRuleOpt1) = FBarRuleOpt1 ()
 in (FRule :: FBarRuleOpt)
end)
 in ( LrTable.NT 13, ( result, FRule1left, FBarRuleOpt1right), rest671
)
end
|  ( 57, ( ( _, ( MlyValue.FMatch FMatch1, _, FMatch1right)) :: ( _, (
 _, BAR1left, _)) :: rest671)) => let val  result = 
MlyValue.FBarRuleOpt (fn _ => let val  (FMatch as FMatch1) = FMatch1
 ()
 in (FMatch)
end)
 in ( LrTable.NT 14, ( result, BAR1left, FMatch1right), rest671)
end
|  ( 58, ( rest671)) => let val  result = MlyValue.FBarRuleOpt (fn _
 => ([]))
 in ( LrTable.NT 14, ( result, defaultPos, defaultPos), rest671)
end
|  ( 59, ( ( _, ( MlyValue.Exp Exp1, _, Exp1right)) :: _ :: ( _, ( 
MlyValue.AtPatterns AtPatterns1, _, _)) :: ( _, ( MlyValue.ID ID1, 
ID1left, _)) :: rest671)) => let val  result = MlyValue.FRule (fn _ =>
 let val  (ID as ID1) = ID1 ()
 val  (AtPatterns as AtPatterns1) = AtPatterns1 ()
 val  (Exp as Exp1) = Exp1 ()
 in ((ID,(AtPatterns,Exp)))
end)
 in ( LrTable.NT 15, ( result, ID1left, Exp1right), rest671)
end
|  ( 60, ( ( _, ( MlyValue.BarRuleOpt BarRuleOpt1, _, BarRuleOpt1right
)) :: ( _, ( MlyValue.Rule Rule1, Rule1left, _)) :: rest671)) => let
 val  result = MlyValue.PMatch (fn _ => let val  (Rule as Rule1) = 
Rule1 ()
 val  (BarRuleOpt as BarRuleOpt1) = BarRuleOpt1 ()
 in (Rule :: BarRuleOpt)
end)
 in ( LrTable.NT 10, ( result, Rule1left, BarRuleOpt1right), rest671)

end
|  ( 61, ( ( _, ( MlyValue.PMatch PMatch1, _, PMatch1right)) :: ( _, (
 _, BAR1left, _)) :: rest671)) => let val  result = 
MlyValue.BarRuleOpt (fn _ => let val  (PMatch as PMatch1) = PMatch1 ()
 in (PMatch)
end)
 in ( LrTable.NT 11, ( result, BAR1left, PMatch1right), rest671)
end
|  ( 62, ( rest671)) => let val  result = MlyValue.BarRuleOpt (fn _ =>
 ([]))
 in ( LrTable.NT 11, ( result, defaultPos, defaultPos), rest671)
end
|  ( 63, ( ( _, ( MlyValue.Exp Exp1, _, Exp1right)) :: _ :: ( _, ( 
MlyValue.Pattern Pattern1, Pattern1left, _)) :: rest671)) => let val  
result = MlyValue.Rule (fn _ => let val  (Pattern as Pattern1) = 
Pattern1 ()
 val  (Exp as Exp1) = Exp1 ()
 in ((Pattern, Exp))
end)
 in ( LrTable.NT 12, ( result, Pattern1left, Exp1right), rest671)
end
|  ( 64, ( ( _, ( MlyValue.ID ID1, ID1left, ID1right)) :: rest671)) =>
 let val  result = MlyValue.AtPattern (fn _ => let val  (ID as ID1) = 
ID1 ()
 in (P.PVar ID)
end)
 in ( LrTable.NT 17, ( result, ID1left, ID1right), rest671)
end
|  ( 65, ( ( _, ( MlyValue.CONS CONS1, CONS1left, CONS1right)) :: 
rest671)) => let val  result = MlyValue.AtPattern (fn _ => let val  (
CONS as CONS1) = CONS1 ()
 in (P.PCon(mk_const CONS 0 2,nullCarg))
end)
 in ( LrTable.NT 17, ( result, CONS1left, CONS1right), rest671)
end
|  ( 66, ( ( _, ( _, _, RBRACKET1right)) :: ( _, ( _, LBRACKET1left, _
)) :: rest671)) => let val  result = MlyValue.AtPattern (fn _ => (
P.PCon(NILcon,nullCarg)))
 in ( LrTable.NT 17, ( result, LBRACKET1left, RBRACKET1right), rest671
)
end
|  ( 67, ( ( _, ( _, _, RPAREN1right)) :: ( _, ( _, LPAREN1left, _))
 :: rest671)) => let val  result = MlyValue.AtPattern (fn _ => (
P.PCon(UNITcon,[])))
 in ( LrTable.NT 17, ( result, LPAREN1left, RPAREN1right), rest671)

end
|  ( 68, ( ( _, ( _, _, RPAREN1right)) :: ( _, ( MlyValue.PatternList 
PatternList1, _, _)) :: ( _, ( _, LPAREN1left, _)) :: rest671)) => let
 val  result = MlyValue.AtPattern (fn _ => let val  (PatternList as 
PatternList1) = PatternList1 ()
 in (
case PatternList of
					     [p] => p
					   | ps => P.PCon(P.TupleCon(List.length ps), ps)
                                        
)
end)
 in ( LrTable.NT 17, ( result, LPAREN1left, RPAREN1right), rest671)

end
|  ( 69, ( ( _, ( MlyValue.AtPattern AtPattern1, AtPattern1left, 
AtPattern1right)) :: rest671)) => let val  result = MlyValue.Pattern
 (fn _ => let val  (AtPattern as AtPattern1) = AtPattern1 ()
 in (AtPattern)
end)
 in ( LrTable.NT 16, ( result, AtPattern1left, AtPattern1right), 
rest671)
end
|  ( 70, ( ( _, ( MlyValue.AtPattern AtPattern1, _, AtPattern1right))
 :: ( _, ( MlyValue.CONS CONS1, CONS1left, _)) :: rest671)) => let
 val  result = MlyValue.Pattern (fn _ => let val  (CONS as CONS1) = 
CONS1 ()
 val  (AtPattern as AtPattern1) = AtPattern1 ()
 in (
case AtPattern of
					     P.PCon(P.TupleCon(ar), ps) =>
					        P.PCon(mk_const CONS ar 2, ps)
					   | p =>
					        P.PCon(mk_const CONS 1 2, [p])
                                        
)
end)
 in ( LrTable.NT 16, ( result, CONS1left, AtPattern1right), rest671)

end
|  ( 71, ( ( _, ( MlyValue.AtPattern AtPattern2, _, AtPattern2right))
 :: _ :: ( _, ( MlyValue.AtPattern AtPattern1, AtPattern1left, _)) :: 
rest671)) => let val  result = MlyValue.Pattern (fn _ => let val  
AtPattern1 = AtPattern1 ()
 val  AtPattern2 = AtPattern2 ()
 in (P.PCon(CONScon,[AtPattern1, AtPattern2]))
end)
 in ( LrTable.NT 16, ( result, AtPattern1left, AtPattern2right), 
rest671)
end
|  ( 72, ( ( _, ( MlyValue.Pattern Pattern1, Pattern1left, 
Pattern1right)) :: rest671)) => let val  result = MlyValue.PatternList
 (fn _ => let val  (Pattern as Pattern1) = Pattern1 ()
 in ([Pattern])
end)
 in ( LrTable.NT 18, ( result, Pattern1left, Pattern1right), rest671)

end
|  ( 73, ( ( _, ( MlyValue.PatternList PatternList1, _, 
PatternList1right)) :: _ :: ( _, ( MlyValue.Pattern Pattern1, 
Pattern1left, _)) :: rest671)) => let val  result = 
MlyValue.PatternList (fn _ => let val  (Pattern as Pattern1) = 
Pattern1 ()
 val  (PatternList as PatternList1) = PatternList1 ()
 in (Pattern :: PatternList)
end)
 in ( LrTable.NT 18, ( result, Pattern1left, PatternList1right), 
rest671)
end
|  ( 74, ( ( _, ( MlyValue.AtPattern AtPattern1, AtPattern1left, 
AtPattern1right)) :: rest671)) => let val  result = 
MlyValue.AtPatterns (fn _ => let val  (AtPattern as AtPattern1) = 
AtPattern1 ()
 in ([AtPattern])
end)
 in ( LrTable.NT 20, ( result, AtPattern1left, AtPattern1right), 
rest671)
end
|  ( 75, ( ( _, ( MlyValue.AtPatterns AtPatterns1, _, AtPatterns1right
)) :: ( _, ( MlyValue.AtPattern AtPattern1, AtPattern1left, _)) :: 
rest671)) => let val  result = MlyValue.AtPatterns (fn _ => let val  (
AtPattern as AtPattern1) = AtPattern1 ()
 val  (AtPatterns as AtPatterns1) = AtPatterns1 ()
 in (AtPattern :: AtPatterns)
end)
 in ( LrTable.NT 20, ( result, AtPattern1left, AtPatterns1right), 
rest671)
end
|  ( 76, ( ( _, ( MlyValue.ID ID1, ID1left, ID1right)) :: rest671)) =>
 let val  result = MlyValue.IdList (fn _ => let val  (ID as ID1) = ID1
 ()
 in ([ID])
end)
 in ( LrTable.NT 0, ( result, ID1left, ID1right), rest671)
end
|  ( 77, ( ( _, ( MlyValue.IdList IdList1, _, IdList1right)) :: _ :: (
 _, ( MlyValue.ID ID1, ID1left, _)) :: rest671)) => let val  result = 
MlyValue.IdList (fn _ => let val  (ID as ID1) = ID1 ()
 val  (IdList as IdList1) = IdList1 ()
 in ((ID) :: IdList)
end)
 in ( LrTable.NT 0, ( result, ID1left, IdList1right), rest671)
end
|  ( 78, ( ( _, ( MlyValue.ConBinds ConBinds1, _, ConBinds1right)) ::
 _ :: ( _, ( MlyValue.ID ID1, _, _)) :: ( _, ( _, DATATYPE1left, _))
 :: rest671)) => let val  result = MlyValue.DatBind (fn _ => let val 
 (ID as ID1) = ID1 ()
 val  (ConBinds as ConBinds1) = ConBinds1 ()
 in (A.DatBind(ID, [], ConBinds))
end)
 in ( LrTable.NT 30, ( result, DATATYPE1left, ConBinds1right), rest671
)
end
|  ( 79, ( ( _, ( MlyValue.ConBinds ConBinds1, _, ConBinds1right)) ::
 _ :: ( _, ( MlyValue.ID ID1, _, _)) :: ( _, ( MlyValue.TYID TYID1, _,
 _)) :: ( _, ( _, DATATYPE1left, _)) :: rest671)) => let val  result =
 MlyValue.DatBind (fn _ => let val  (TYID as TYID1) = TYID1 ()
 val  (ID as ID1) = ID1 ()
 val  (ConBinds as ConBinds1) = ConBinds1 ()
 in (A.DatBind(ID, [TYID], ConBinds))
end)
 in ( LrTable.NT 30, ( result, DATATYPE1left, ConBinds1right), rest671
)
end
|  ( 80, ( ( _, ( MlyValue.ConBinds ConBinds1, _, ConBinds1right)) ::
 _ :: ( _, ( MlyValue.ID ID1, _, _)) :: _ :: ( _, ( MlyValue.TyIds 
TyIds1, _, _)) :: _ :: ( _, ( _, DATATYPE1left, _)) :: rest671)) =>
 let val  result = MlyValue.DatBind (fn _ => let val  (TyIds as TyIds1
) = TyIds1 ()
 val  (ID as ID1) = ID1 ()
 val  (ConBinds as ConBinds1) = ConBinds1 ()
 in (A.DatBind(ID, TyIds, ConBinds))
end)
 in ( LrTable.NT 30, ( result, DATATYPE1left, ConBinds1right), rest671
)
end
|  ( 81, ( ( _, ( MlyValue.ConBind ConBind1, ConBind1left, 
ConBind1right)) :: rest671)) => let val  result = MlyValue.ConBinds
 (fn _ => let val  (ConBind as ConBind1) = ConBind1 ()
 in ([ConBind])
end)
 in ( LrTable.NT 27, ( result, ConBind1left, ConBind1right), rest671)

end
|  ( 82, ( ( _, ( MlyValue.ConBinds ConBinds1, _, ConBinds1right)) ::
 _ :: ( _, ( MlyValue.ConBind ConBind1, ConBind1left, _)) :: rest671))
 => let val  result = MlyValue.ConBinds (fn _ => let val  (ConBind as 
ConBind1) = ConBind1 ()
 val  (ConBinds as ConBinds1) = ConBinds1 ()
 in (ConBind :: ConBinds)
end)
 in ( LrTable.NT 27, ( result, ConBind1left, ConBinds1right), rest671)

end
|  ( 83, ( ( _, ( MlyValue.CONS CONS1, CONS1left, CONS1right)) :: 
rest671)) => let val  result = MlyValue.ConBind (fn _ => let val  (
CONS as CONS1) = CONS1 ()
 in (A.Con(CONS, A.TyCon([],"unit")))
end)
 in ( LrTable.NT 26, ( result, CONS1left, CONS1right), rest671)
end
|  ( 84, ( ( _, ( MlyValue.TyExp TyExp1, _, TyExp1right)) :: _ :: ( _,
 ( MlyValue.CONS CONS1, CONS1left, _)) :: rest671)) => let val  result
 = MlyValue.ConBind (fn _ => let val  (CONS as CONS1) = CONS1 ()
 val  (TyExp as TyExp1) = TyExp1 ()
 in (A.Con(CONS, TyExp))
end)
 in ( LrTable.NT 26, ( result, CONS1left, TyExp1right), rest671)
end
|  ( 85, ( ( _, ( MlyValue.TyExp TyExp1, _, TyExp1right)) :: _ :: ( _,
 ( MlyValue.ID ID1, _, _)) :: ( _, ( _, TYPE1left, _)) :: rest671)) =>
 let val  result = MlyValue.TyBind (fn _ => let val  (ID as ID1) = ID1
 ()
 val  (TyExp as TyExp1) = TyExp1 ()
 in (A.TyBind(ID, [], TyExp))
end)
 in ( LrTable.NT 31, ( result, TYPE1left, TyExp1right), rest671)
end
|  ( 86, ( ( _, ( MlyValue.TyExp TyExp1, _, TyExp1right)) :: _ :: ( _,
 ( MlyValue.ID ID1, _, _)) :: ( _, ( MlyValue.TYID TYID1, _, _)) :: (
 _, ( _, TYPE1left, _)) :: rest671)) => let val  result = 
MlyValue.TyBind (fn _ => let val  (TYID as TYID1) = TYID1 ()
 val  (ID as ID1) = ID1 ()
 val  (TyExp as TyExp1) = TyExp1 ()
 in (A.TyBind(ID, [TYID], TyExp))
end)
 in ( LrTable.NT 31, ( result, TYPE1left, TyExp1right), rest671)
end
|  ( 87, ( ( _, ( MlyValue.TyExp TyExp1, _, TyExp1right)) :: ( _, ( 
MlyValue.ID ID1, _, _)) :: _ :: ( _, ( MlyValue.TyIds TyIds1, _, _))
 :: _ :: ( _, ( _, TYPE1left, _)) :: rest671)) => let val  result = 
MlyValue.TyBind (fn _ => let val  (TyIds as TyIds1) = TyIds1 ()
 val  (ID as ID1) = ID1 ()
 val  (TyExp as TyExp1) = TyExp1 ()
 in (A.TyBind(ID, TyIds, TyExp))
end)
 in ( LrTable.NT 31, ( result, TYPE1left, TyExp1right), rest671)
end
|  ( 88, ( ( _, ( MlyValue.TupleTyExp TupleTyExp1, TupleTyExp1left, 
TupleTyExp1right)) :: rest671)) => let val  result = MlyValue.TyExp
 (fn _ => let val  (TupleTyExp as TupleTyExp1) = TupleTyExp1 ()
 in (A.TyTuple(TupleTyExp))
end)
 in ( LrTable.NT 24, ( result, TupleTyExp1left, TupleTyExp1right), 
rest671)
end
|  ( 89, ( ( _, ( MlyValue.TyExp TyExp2, _, TyExp2right)) :: _ :: ( _,
 ( MlyValue.TyExp TyExp1, TyExp1left, _)) :: rest671)) => let val  
result = MlyValue.TyExp (fn _ => let val  TyExp1 = TyExp1 ()
 val  TyExp2 = TyExp2 ()
 in (A.TyArrow(TyExp1,TyExp2))
end)
 in ( LrTable.NT 24, ( result, TyExp1left, TyExp2right), rest671)
end
|  ( 90, ( ( _, ( MlyValue.AtTyExp AtTyExp1, AtTyExp1left, 
AtTyExp1right)) :: rest671)) => let val  result = MlyValue.TyExp (fn _
 => let val  (AtTyExp as AtTyExp1) = AtTyExp1 ()
 in (AtTyExp)
end)
 in ( LrTable.NT 24, ( result, AtTyExp1left, AtTyExp1right), rest671)

end
|  ( 91, ( ( _, ( MlyValue.AtTyExp AtTyExp2, _, AtTyExp2right)) :: _
 :: ( _, ( MlyValue.AtTyExp AtTyExp1, AtTyExp1left, _)) :: rest671))
 => let val  result = MlyValue.TupleTyExp (fn _ => let val  AtTyExp1 =
 AtTyExp1 ()
 val  AtTyExp2 = AtTyExp2 ()
 in ([AtTyExp1,AtTyExp2])
end)
 in ( LrTable.NT 23, ( result, AtTyExp1left, AtTyExp2right), rest671)

end
|  ( 92, ( ( _, ( MlyValue.TupleTyExp TupleTyExp1, _, TupleTyExp1right
)) :: _ :: ( _, ( MlyValue.AtTyExp AtTyExp1, AtTyExp1left, _)) :: 
rest671)) => let val  result = MlyValue.TupleTyExp (fn _ => let val  (
AtTyExp as AtTyExp1) = AtTyExp1 ()
 val  (TupleTyExp as TupleTyExp1) = TupleTyExp1 ()
 in (AtTyExp::TupleTyExp)
end)
 in ( LrTable.NT 23, ( result, AtTyExp1left, TupleTyExp1right), 
rest671)
end
|  ( 93, ( ( _, ( MlyValue.ID ID1, ID1left, ID1right)) :: rest671)) =>
 let val  result = MlyValue.AtTyExp (fn _ => let val  (ID as ID1) = 
ID1 ()
 in (A.TyCon([],ID))
end)
 in ( LrTable.NT 22, ( result, ID1left, ID1right), rest671)
end
|  ( 94, ( ( _, ( MlyValue.TYID TYID1, TYID1left, TYID1right)) :: 
rest671)) => let val  result = MlyValue.AtTyExp (fn _ => let val  (
TYID as TYID1) = TYID1 ()
 in (A.TyVar TYID)
end)
 in ( LrTable.NT 22, ( result, TYID1left, TYID1right), rest671)
end
|  ( 95, ( ( _, ( _, _, RPAREN1right)) :: ( _, ( MlyValue.TyExp TyExp1
, _, _)) :: ( _, ( _, LPAREN1left, _)) :: rest671)) => let val  result
 = MlyValue.AtTyExp (fn _ => let val  (TyExp as TyExp1) = TyExp1 ()
 in (TyExp)
end)
 in ( LrTable.NT 22, ( result, LPAREN1left, RPAREN1right), rest671)

end
|  ( 96, ( ( _, ( MlyValue.ID ID1, _, ID1right)) :: ( _, ( 
MlyValue.AtTyExp AtTyExp1, AtTyExp1left, _)) :: rest671)) => let val  
result = MlyValue.AtTyExp (fn _ => let val  (AtTyExp as AtTyExp1) = 
AtTyExp1 ()
 val  (ID as ID1) = ID1 ()
 in (A.TyCon([AtTyExp],ID))
end)
 in ( LrTable.NT 22, ( result, AtTyExp1left, ID1right), rest671)
end
|  ( 97, ( ( _, ( MlyValue.ID ID1, _, ID1right)) :: _ :: ( _, ( 
MlyValue.TyExpSeq TyExpSeq1, _, _)) :: ( _, ( _, LPAREN1left, _)) :: 
rest671)) => let val  result = MlyValue.AtTyExp (fn _ => let val  (
TyExpSeq as TyExpSeq1) = TyExpSeq1 ()
 val  (ID as ID1) = ID1 ()
 in (A.TyCon(TyExpSeq,ID))
end)
 in ( LrTable.NT 22, ( result, LPAREN1left, ID1right), rest671)
end
|  ( 98, ( ( _, ( MlyValue.TyExp TyExp2, _, TyExp2right)) :: _ :: ( _,
 ( MlyValue.TyExp TyExp1, TyExp1left, _)) :: rest671)) => let val  
result = MlyValue.TyExpSeq (fn _ => let val  TyExp1 = TyExp1 ()
 val  TyExp2 = TyExp2 ()
 in ([TyExp1,TyExp2])
end)
 in ( LrTable.NT 25, ( result, TyExp1left, TyExp2right), rest671)
end
|  ( 99, ( ( _, ( MlyValue.TyExpSeq TyExpSeq1, _, TyExpSeq1right)) ::
 _ :: ( _, ( MlyValue.TyExp TyExp1, TyExp1left, _)) :: rest671)) =>
 let val  result = MlyValue.TyExpSeq (fn _ => let val  (TyExp as 
TyExp1) = TyExp1 ()
 val  (TyExpSeq as TyExpSeq1) = TyExpSeq1 ()
 in (TyExp :: TyExpSeq)
end)
 in ( LrTable.NT 25, ( result, TyExp1left, TyExpSeq1right), rest671)

end
|  ( 100, ( ( _, ( MlyValue.TYID TYID1, TYID1left, TYID1right)) :: 
rest671)) => let val  result = MlyValue.TyIds (fn _ => let val  (TYID
 as TYID1) = TYID1 ()
 in ([TYID])
end)
 in ( LrTable.NT 21, ( result, TYID1left, TYID1right), rest671)
end
|  ( 101, ( ( _, ( MlyValue.TyIds TyIds1, _, TyIds1right)) :: _ :: ( _
, ( MlyValue.TYID TYID1, TYID1left, _)) :: rest671)) => let val  
result = MlyValue.TyIds (fn _ => let val  (TYID as TYID1) = TYID1 ()
 val  (TyIds as TyIds1) = TyIds1 ()
 in (TYID :: TyIds)
end)
 in ( LrTable.NT 21, ( result, TYID1left, TyIds1right), rest671)
end
| _ => raise (mlyAction i392)
end
val void = MlyValue.VOID
val extract = fn a => (fn MlyValue.Program x => x
| _ => let exception ParseInternal
	in raise ParseInternal end) a ()
end
end
structure Tokens : MiniML_TOKENS =
struct
type svalue = ParserData.svalue
type ('a,'b) token = ('a,'b) Token.token
fun PERIOD (p1,p2) = Token.TOKEN (ParserData.LrTable.T 0,(
ParserData.MlyValue.VOID,p1,p2))
fun COMMA (p1,p2) = Token.TOKEN (ParserData.LrTable.T 1,(
ParserData.MlyValue.VOID,p1,p2))
fun SEMICOLON (p1,p2) = Token.TOKEN (ParserData.LrTable.T 2,(
ParserData.MlyValue.VOID,p1,p2))
fun COLON (p1,p2) = Token.TOKEN (ParserData.LrTable.T 3,(
ParserData.MlyValue.VOID,p1,p2))
fun EQ (p1,p2) = Token.TOKEN (ParserData.LrTable.T 4,(
ParserData.MlyValue.VOID,p1,p2))
fun GE (p1,p2) = Token.TOKEN (ParserData.LrTable.T 5,(
ParserData.MlyValue.VOID,p1,p2))
fun LE (p1,p2) = Token.TOKEN (ParserData.LrTable.T 6,(
ParserData.MlyValue.VOID,p1,p2))
fun GT (p1,p2) = Token.TOKEN (ParserData.LrTable.T 7,(
ParserData.MlyValue.VOID,p1,p2))
fun LT (p1,p2) = Token.TOKEN (ParserData.LrTable.T 8,(
ParserData.MlyValue.VOID,p1,p2))
fun PLUS (p1,p2) = Token.TOKEN (ParserData.LrTable.T 9,(
ParserData.MlyValue.VOID,p1,p2))
fun MINUS (p1,p2) = Token.TOKEN (ParserData.LrTable.T 10,(
ParserData.MlyValue.VOID,p1,p2))
fun DIV (p1,p2) = Token.TOKEN (ParserData.LrTable.T 11,(
ParserData.MlyValue.VOID,p1,p2))
fun DARROW (p1,p2) = Token.TOKEN (ParserData.LrTable.T 12,(
ParserData.MlyValue.VOID,p1,p2))
fun BAR (p1,p2) = Token.TOKEN (ParserData.LrTable.T 13,(
ParserData.MlyValue.VOID,p1,p2))
fun HASH (p1,p2) = Token.TOKEN (ParserData.LrTable.T 14,(
ParserData.MlyValue.VOID,p1,p2))
fun LAMBDA (p1,p2) = Token.TOKEN (ParserData.LrTable.T 15,(
ParserData.MlyValue.VOID,p1,p2))
fun ARROW (p1,p2) = Token.TOKEN (ParserData.LrTable.T 16,(
ParserData.MlyValue.VOID,p1,p2))
fun ASTERISK (p1,p2) = Token.TOKEN (ParserData.LrTable.T 17,(
ParserData.MlyValue.VOID,p1,p2))
fun LPAREN (p1,p2) = Token.TOKEN (ParserData.LrTable.T 18,(
ParserData.MlyValue.VOID,p1,p2))
fun RPAREN (p1,p2) = Token.TOKEN (ParserData.LrTable.T 19,(
ParserData.MlyValue.VOID,p1,p2))
fun LBRACKET (p1,p2) = Token.TOKEN (ParserData.LrTable.T 20,(
ParserData.MlyValue.VOID,p1,p2))
fun RBRACKET (p1,p2) = Token.TOKEN (ParserData.LrTable.T 21,(
ParserData.MlyValue.VOID,p1,p2))
fun COLONCOLON (p1,p2) = Token.TOKEN (ParserData.LrTable.T 22,(
ParserData.MlyValue.VOID,p1,p2))
fun REF (p1,p2) = Token.TOKEN (ParserData.LrTable.T 23,(
ParserData.MlyValue.VOID,p1,p2))
fun BANG (p1,p2) = Token.TOKEN (ParserData.LrTable.T 24,(
ParserData.MlyValue.VOID,p1,p2))
fun ASSIGN (p1,p2) = Token.TOKEN (ParserData.LrTable.T 25,(
ParserData.MlyValue.VOID,p1,p2))
fun HAT (p1,p2) = Token.TOKEN (ParserData.LrTable.T 26,(
ParserData.MlyValue.VOID,p1,p2))
fun AT (p1,p2) = Token.TOKEN (ParserData.LrTable.T 27,(
ParserData.MlyValue.VOID,p1,p2))
fun INTLIT (i,p1,p2) = Token.TOKEN (ParserData.LrTable.T 28,(
ParserData.MlyValue.INTLIT (fn () => i),p1,p2))
fun ID (i,p1,p2) = Token.TOKEN (ParserData.LrTable.T 29,(
ParserData.MlyValue.ID (fn () => i),p1,p2))
fun TYID (i,p1,p2) = Token.TOKEN (ParserData.LrTable.T 30,(
ParserData.MlyValue.TYID (fn () => i),p1,p2))
fun CONS (i,p1,p2) = Token.TOKEN (ParserData.LrTable.T 31,(
ParserData.MlyValue.CONS (fn () => i),p1,p2))
fun STRING (i,p1,p2) = Token.TOKEN (ParserData.LrTable.T 32,(
ParserData.MlyValue.STRING (fn () => i),p1,p2))
fun LET (p1,p2) = Token.TOKEN (ParserData.LrTable.T 33,(
ParserData.MlyValue.VOID,p1,p2))
fun IN (p1,p2) = Token.TOKEN (ParserData.LrTable.T 34,(
ParserData.MlyValue.VOID,p1,p2))
fun END (p1,p2) = Token.TOKEN (ParserData.LrTable.T 35,(
ParserData.MlyValue.VOID,p1,p2))
fun IF (p1,p2) = Token.TOKEN (ParserData.LrTable.T 36,(
ParserData.MlyValue.VOID,p1,p2))
fun THEN (p1,p2) = Token.TOKEN (ParserData.LrTable.T 37,(
ParserData.MlyValue.VOID,p1,p2))
fun ELSE (p1,p2) = Token.TOKEN (ParserData.LrTable.T 38,(
ParserData.MlyValue.VOID,p1,p2))
fun FIX (p1,p2) = Token.TOKEN (ParserData.LrTable.T 39,(
ParserData.MlyValue.VOID,p1,p2))
fun CASE (p1,p2) = Token.TOKEN (ParserData.LrTable.T 40,(
ParserData.MlyValue.VOID,p1,p2))
fun OF (p1,p2) = Token.TOKEN (ParserData.LrTable.T 41,(
ParserData.MlyValue.VOID,p1,p2))
fun FUN (p1,p2) = Token.TOKEN (ParserData.LrTable.T 42,(
ParserData.MlyValue.VOID,p1,p2))
fun DATATYPE (p1,p2) = Token.TOKEN (ParserData.LrTable.T 43,(
ParserData.MlyValue.VOID,p1,p2))
fun TYPE (p1,p2) = Token.TOKEN (ParserData.LrTable.T 44,(
ParserData.MlyValue.VOID,p1,p2))
fun VAL (p1,p2) = Token.TOKEN (ParserData.LrTable.T 45,(
ParserData.MlyValue.VOID,p1,p2))
fun EXPORT (p1,p2) = Token.TOKEN (ParserData.LrTable.T 46,(
ParserData.MlyValue.VOID,p1,p2))
fun FROM (p1,p2) = Token.TOKEN (ParserData.LrTable.T 47,(
ParserData.MlyValue.VOID,p1,p2))
fun EOF (p1,p2) = Token.TOKEN (ParserData.LrTable.T 48,(
ParserData.MlyValue.VOID,p1,p2))
end
end
