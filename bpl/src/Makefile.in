# Copyright (c) 2006  The BPL Group at the IT University of Copenhagen
#
# This file is part of BPL.
#
# BPL is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or (at
# your option) any later version.
#
# BPL is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with BPL; if not, write to the Free Software
# Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301
# USA

# $Revision: 1.11 $

# Top makefile for BPL.  Targets include:
#
#   DIRTREE      - a description of the directory tree
#
#   doc          - API documentation for BDNF stuff, etc.
#
#   clean        - remove some mosmake files

@SET_MAKE@

SHELL           = @SHELL@

prefix		= @prefix@
datarootdir	= @datarootdir@
srcdir		= @srcdir@
datadir		= @datadir@
smldocdir	= @smldocdir@
libdir		= @libdir@

RM              = rm -f
export SED      = @SED@

MOSMLC  	= @MOSMLC@
PERL    	= @PERL@
MLYACC          = @MLYACC@
MLLEX           = @MLLEX@
SMLNJ           = @SMLNJ@
MLTON		= @MLTON@
MLC		= @MLC@
KILL	= /usr/bin/kill
RUBY	= ruby

MAKEFILE	= Makefile
EXEEXT		= @EXEEXT@

INSTALL		= @INSTALL@
INSTALL_DATA= @INSTALL_DATA@
RPMBUILD	= rpmbuild
RPMSRCDIR	= @RPMSRCDIR@
RPMSDIR		= @RPMSDIR@

TOOLNAME	= bpltool
VERSION		:= $(shell cat VERSION)
MOSMLFLAGS 	= -liberal
DEPENDENCIES    := $(shell find . -name $(TOOLNAME)-\* -prune -o -name Dependencies -print)
MOSMAKEDIRS 	:= $(subst ./,, $(patsubst %/Dependencies,%,$(DEPENDENCIES)))
MOSMAKE 	= lib/mosmake

SVN		= svn

DOCSUBDIR	= doc
SMLDOC		= smldoc
SMLDOC-FLAGS	= --overview=overview.html --argfile=smldoc.cfg

ROOTDIR		= ..
THISDIR		= src
MKDIRTREE	= ./mkdirtree
MKTAR           = ./mktar.sh
TARBUILDFLAG	= tarbuild.flag
DESCFILES	= $(shell find . -name .description)
SMLFILES-kernel	:= $(shell find ./kernel -name CM -prune -a -type f -o -name *.sml)
SMLFILES-lib	:= $(shell find ./lib -name CM -prune -a -type f -o -name *.sml)
SMLFILES-miniml	:= $(shell find ./apps/miniml -name CM -prune -a -type f -o -name *.sml)
CMFILES        	= $(filter-out ./lib/compat/common/sources.cm, $(patsubst %/Dependencies,%/sources.cm,$(DEPENDENCIES)))
CMFILES-kernel	= $(filter ./kernel/%,$(CMFILES))
CMFILES-lib	= $(filter-out ./lib/fxp/% ./lib/compat/mosml/thread/sources.cm,$(filter ./lib/%,$(CMFILES)))
CMFILES-miniml	= $(filter ./apps/miniml/%,$(CMFILES))
# Files to install when installing on a system running SMLNJ
SMLNJ-kernel	= $(shell find ./kernel -name CM -prune -o -type f -print) 
SMLNJ-lib	= $(shell find ./lib -name CM -prune -o -type f -print) 
SMLNJ-apps	= $(shell find ./apps -name bplweb -prune -o -name CM -prune -o -type f -a -print)
SMLNJFILES	= $(shell find . -name bplweb -prune -o -name CM -prune -o -name .svn -prune -o -type f -a -print)
#SMLNJFILES	= $(SMLNJ-lib) $(SMLNJ-kernel) $(SMLNJ-apps)
SMLNJDIRS	= $(shell find . -name bplweb -prune -o -name CM -prune -o -name .svn -prune -o -type d -a -print)

include $(MOSMAKE)/Makefile.inc

#WEBAPP-BPLDIR	= /import/stud/share/projects/bpl/work/bpl
#WEBAPP-SERVER	= ssh.itu.dk
WEBAPP-BPLDIR	= /home/panic/Research/bplproject/impl/bpl
WEBAPP-SERVER	= tiger.itu.dk
DISTWEBDIR	= /import/www/research/theory/bpl/dist/bpltool

# Files to clean up
CLEANFILES :=
REALCLEANFILES :=
DISTCLEANFILES :=

# Automatic makefil'ing
.PHONY: ajour

ajour: configure $(MAKEFILE)

$(MAKEFILE): Makefile.chain

$(MAKEFILE) Makefile.chain: %: %.in config.status
	./config.status --file=$@ newdeps

config.status: configure
	./config.status --recheck

configure: configure.in
	autoconf

DISTCLEANFILES += config.cache config.log config.status Makefile Makefile.chain mosmake.dep


# Parsers and lexers
GRMFILES := $(shell find . -name '*.grm')
LEXFILES := $(shell find . -name '*.lex')
PARSINGFILES := $(patsubst %.grm,%.grm-sig.sml,$(GRMFILES)) $(patsubst %.grm,%.grm.sml,$(GRMFILES)) $(patsubst %.lex,%.lex.sml,$(LEXFILES))

%.lex.sml: %.lex
	cd $(dir $@) && $(MAKE) $(notdir $@)

%.grm-sig.sml %.grm.sig %.grm.sml: %.grm
	cd $(dir $@) && $(MAKE) $(notdir $@)

# SVN
.PHONY: svn-update
svn-update:
	cd .. && [ -d .svn ] && $(SVN) update

# Documentation

.PHONY:	all doc doc-kernel doc-lib doc-miniml upload-doc

doc: doc-lib doc-kernel doc-miniml

doc-lib:	lib/$(DOCSUBDIR)/index.html
lib/$(DOCSUBDIR)/index.html lib/$(DOCSUBDIR)/module-list: lib/smldoc.cfg lib/overview.html $(CMFILES-lib) $(SMLFILES-lib)
	test -w lib/$(DOCSUBDIR) || mkdir lib/$(DOCSUBDIR)
	cd lib && $(SMLDOC) -d $(DOCSUBDIR) $(SMLDOC-FLAGS) \
	$(subst ./lib/,./,$(filter-out %/test/sources.cm,$(CMFILES-lib)))

doc-kernel:	kernel/$(DOCSUBDIR)/index.html
kernel/$(DOCSUBDIR)/index.html kernel/$(DOCSUBDIR)/module-list: kernel/smldoc.cfg kernel/overview.html lib/$(DOCSUBDIR)/module-list $(CMFILES-kernel) $(SMLFILES-kernel)
	test -w kernel/$(DOCSUBDIR) || mkdir kernel/$(DOCSUBDIR)
	cd kernel && $(SMLDOC) -d $(DOCSUBDIR) $(SMLDOC-FLAGS) \
	$(subst ./kernel/,./,$(filter-out %/test/sources.cm,$(CMFILES-kernel)))

doc-miniml:	apps/miniml/$(DOCSUBDIR)/index.html
apps/miniml/$(DOCSUBDIR)/index.html: apps/miniml/smldoc.cfg apps/miniml/overview.html lib/$(DOCSUBDIR)/module-list kernel/$(DOCSUBDIR)/module-list $(CMFILES-miniml) $(SMLFILES-miniml)
	test -w apps/miniml/$(DOCSUBDIR) || mkdir apps/miniml/$(DOCSUBDIR)
	cd apps/miniml && $(SMLDOC) -d $(DOCSUBDIR) $(SMLDOC-FLAGS) \
	$(subst ./apps/miniml/,./,$(filter-out %/test/sources.cm,$(CMFILES-miniml)))

DIRTREE: $(DESCFILES) $(MKDIRTREE)
	echo "Directory summary (automatically generated, foolish to edit):" > $@
	echo "" >> $@
	cd $(ROOTDIR) && $(MKDIRTREE) $(THISDIR) >> $(THISDIR)/$@

upload-doc: #doc-lib doc-kernel doc-miniml
	@echo '**********************************************************'
	@echo 'Target `upload-doc'"' is deprecated.  To update API docs in"
	@echo the BPL web pages, just commit sml files into the SVN repository.
	@echo 'To install locally, use `make install-doc'"'"
	@exit 1
#	scp kernel/$(DOCSUBDIR)/* ssh.itu.dk:/import/www/research/theory/bpl/doc/ml/doc/kernel/
#	scp lib/$(DOCSUBDIR)/* ssh.itu.dk:/import/www/research/theory/bpl/doc/ml/doc/lib/
#	scp apps/miniml/$(DOCSUBDIR)/* ssh.itu.dk:/import/www/research/theory/bpl/doc/ml/doc/miniml/

.PHONY: install-doc-kernel install-doc-lib install-doc-miniml install-doc
install-doc-lib: doc-lib
	cd lib/$(DOCSUBDIR) && \
	find . -type f -exec $(INSTALL) '{}' '$(smldocdir)/lib/{}' ';'
install-doc-kernel: doc-kernel
	cd kernel/$(DOCSUBDIR) && \
	find . -type f -exec $(INSTALL) '{}' '$(smldocdir)/kernel/{}' ';'
install-doc-miniml: doc-miniml
	cd apps/miniml/$(DOCSUBDIR) && \
	find . -type f -exec $(INSTALL) '{}' '$(smldocdir)/miniml/{}' ';'
install-doc: installdirs-doc $(smldocdir)/index.html install-doc-lib install-doc-kernel install-doc-miniml
$(smldocdir)/index.html: ../www/smldoc-index.html
	$(INSTALL) $< $@
# Make sure all installation directories (e.g. $(smldocdir))
# actually exist by making them if necessary.
.PHONY: installdirs-doc installdirs-smlnj install-smlnj
installdirs-doc: mkinstalldirs
	$(srcdir)/mkinstalldirs $(DESTDIR)$(smldocdir)/lib $(DESTDIR)$(smldocdir)/kernel $(DESTDIR)$(smldocdir)/miniml

installdirs-smlnj: mkinstalldirs
	$(srcdir)/mkinstalldirs $(patsubst %,$(DESTDIR)$(libdir)/$(TOOLNAME)/%,$(SMLNJDIRS))

install-smlnj: installdirs-smlnj
	for file in $(SMLNJFILES); do \
	  $(INSTALL) $$file $(DESTDIR)$(libdir)/$(TOOLNAME)/$$file; \
	done

# SML/NJ
kernel.cm: kernel.cm.in
	$(SED) -e 's+@BPLSRCROOT@+$(CURDIR)+g' < $< > $@

%/sources.cm: %/Dependencies
	cd $(dir $@) && $(MAKE) $(notdir $@)

# MLton
%/mlton.mlb: %/Dependencies
	cd $(dir $@) && $(MAKE) $(notdir $@)

.PHONY: prepare prepare-smlnj prepare-mlton prepare-mosml
prepare: prepare-$(MLC)
prepare-smlnj: $(CMFILES) $(PARSINGFILES)
prepare-mlton: $(patsubst %/Dependencies,%/mlton.mlb,$(DEPENDENCIES)) $(PARSINGFILES)
prepare-mosml: 

.PHONY:	compile-smlnj
compile-smlnj: $(CMFILES)
	echo "val pwd = OS.FileSys.getDir ();\
	      val _   = OS.FileSys.chDir \"lib/compat/smlnj/\";\
	      use \"cmmakedefine.sml\";\
              val _   = OS.FileSys.chDir pwd;\
              val _   = SMLofNJ.Internals.GC.messages false;\
              CM_make \"kernel/sources.cm\"" | $(SMLNJ)


# APPLICATIONS ---------------------------------------------
# Web backend
apps/bplweb/backend/mlton: prepare-mlton $(PARSINGFILES)
	$(MLTON) apps/bplweb/backend/mlton.mlb
# bg2svg backend
apps/svg/bg2svg/bg2svg: prepare-mlton $(PARSINGFILES)
	$(MLTON) -output "$@" apps/svg/bg2svg/mlton.mlb

# TESTING --------------------------------------------------
check: test

test: test-$(MLC)

test-smlnj: prepare-smlnj
	echo "val pwd = OS.FileSys.getDir ();\
	      val _   = OS.FileSys.chDir \"lib/compat/smlnj/\";\
	      use \"cmmakedefine.sml\";\
              val _   = OS.FileSys.chDir pwd;\
              val _   = SMLofNJ.Internals.GC.messages false;\
              CM_make \"test/unittest.cm\"" | $(SMLNJ)

test-mosml: unittest
	./unittest

test-mlton: prepare-mlton $(PARSINGFILES)
	$(MLTON) test/mlton.mlb && test/mlton

.PHONY:	check test test-smlnj test-mosml test-mlton

# SVG
test-bg2svg: test-bg2svg-mlton

test-bg2svg-smlnj: prepare-smlnj $(PARSINGFILES)
	echo "CM.make' \"apps/svg/bg2svg/sources.cm\";" | $(SMLNJ)

test-bg2svg-mosml: bg2svg
	apps/svg/bg2svg/bg2svg < apps/svg/bg2svg/bg2svg-test.txt

test-bg2svg-mlton: apps/svg/bg2svg/bg2svg
	apps/svg/bg2svg/bg2svg < apps/svg/bg2svg/bg2svg-test.txt

# Web application
test-webapp: test-webapp-mlton

test-webapp-smlnj: prepare-smlnj $(PARSINGFILES)
	echo "CM.make' \"apps/bplweb/backend/sources.cm\";" | $(SMLNJ)

test-webapp-mosml: bplwebback
	apps/bplweb/backend/bplwebback < apps/bplweb/backend/test/matching1.cmd

test-webapp-mlton: apps/bplweb/backend/mlton
	apps/bplweb/backend/mlton < apps/bplweb/backend/test/matching1.cmd
.PHONY: test-webapp test-webapp-smlnj test-webapp-mosml test-webapp-mlton

# bpl2bgval
test-bpl2bgval: test-bpl2bgval-$(MLC)

test-bpl2bgval-smlnj: prepare-smlnj $(PARSINGFILES)
	echo "val pwd = OS.FileSys.getDir ();\
	      val _   = OS.FileSys.chDir \"lib/compat/smlnj/\";\
	      use \"cmmakedefine.sml\";\
              val _   = OS.FileSys.chDir pwd;\
              val _   = SMLofNJ.Internals.GC.messages false;\
              CM_make \"test/bpl2bgvalTest.cm\"" | $(SMLNJ)

test-bpl2bgval-mosml: bpl2bgvalTest
	./bpl2bgvalTest
.PHONY: test-bpl2bgval

# REBUILD, RESTART, UPDATE ---------------------------------
# Update web application pages and XML RPC server, but not backend executable
update-webapp:
	ssh $(WEBAPP-SERVER) 'cd $(WEBAPP-BPLDIR)/src/apps/bplweb && $(SVN) update'

# Rebuild backend executable and SVG prettyprinter
remake-uploaded-webapp:
	@echo Remaking webapp at server.  Remember to commit changes first.
	ssh $(WEBAPP-SERVER) 'cd $(WEBAPP-BPLDIR)/src && $(SVN) update && \
	./config.status && nice make apps/bplweb/backend/mlton apps/svg/bg2svg/bg2svg'

# Restart XML RPC server
restart-webapp:
	ssh $(WEBAPP-SERVER) 'cd $(WEBAPP-BPLDIR)/src/apps/bplweb/xmlrpcserver && echo boom >> restart; \
	cd $(WEBAPP-BPLDIR)/src/apps/bplweb/webserver && echo boom >> restart'

.PHONY: test-webapp update-webapp remake-uploaded-webapp restart-webapp test-webapp-smlnj
.PHONY: test-webapp-mosml test-webapp-mlton

# DISTRIBUTION ---------------------------------------------
.PHONY: dist update-dist
# This will build a distribution file bpltool-MAJOR.MINOR.REV.tar.gz
dist: $(srcdir)/$(TOOLNAME)-$(VERSION)-$(shell $(SVN) info . -r head | grep '^Revision:' | tr -c -d 0123456789).tar.gz
$(srcdir)/$(TOOLNAME)-$(VERSION)-%.tar.gz: $(srcdir)/kernel/parsers/bg.grm.sig \
	$(srcdir)/kernel/parsers/rules.grm.sig $(srcdir)/kernel/parsers/bpl.grm.sig \
	 $(srcdir)/apps/miniml/miniml.grm.sig $(srcdir)/kernel/parsers/bg.grm-sig.sml \
	$(srcdir)/kernel/parsers/rules.grm-sig.sml $(srcdir)/kernel/parsers/bpl.grm-sig.sml \
	 $(srcdir)/apps/miniml/miniml.grm-sig.sml $(srcdir)/kernel/parsers/bg.lex.sml \
	$(srcdir)/kernel/parsers/rules.lex.sml $(srcdir)/kernel/parsers/bpl.lex.sml \
	 $(srcdir)/apps/miniml/miniml.lex.sml
	$(MKTAR) $(TOOLNAME) $(VERSION) $*
# This will upload a new distribution if code has changed
# It must be run on a machine on which the web dir DISTWEBDIR is mounted
update-dist:
	$(SVN) update
	if [ -e $(TARBUILDFLAG) ]; then $(MAKE) dist; else true; fi
	if [ -e $(TARBUILDFLAG) ]; then for dist in $(TOOLNAME)-$(VERSION)-*.tar.gz; do \
	  mv $$dist $(DISTWEBDIR)/ || exit 1; \
	  mv $(DISTWEBDIR)/srclinks.html $(DISTWEBDIR)/srclinks.old.html || exit 1; \
	  echo "<tr><td><a href='$$dist'>$$dist</a></td><td>" > $(DISTWEBDIR)/srclinks.html || exit 1; \
	  du -h $(DISTWEBDIR)/$$dist | cut -f 1 >> $(DISTWEBDIR)/srclinks.html || exit 1; \
	  echo "</td><td>" >> $(DISTWEBDIR)/srclinks.html || exit 1; \
	  ls -l --time-style=long-iso $(DISTWEBDIR)/$$dist | cut -d ' ' -f 7-8 >> $(DISTWEBDIR)/srclinks.html || exit 1; \
	  echo "</td></tr>" >> $(DISTWEBDIR)/srclinks.html || exit 1; \
	  cat $(DISTWEBDIR)/srclinks.old.html >> $(DISTWEBDIR)/srclinks.html || exit 1; \
	  rm  $(DISTWEBDIR)/srclinks.old.html; \
	done; else true; fi
	rm -f $(TARBUILDFLAG)
# Make a Fedora RPM for SMLNJ
dist-smlnj-rpm: $(TOOLNAME)-smlnj-$(VERSION)-$(shell $(SVN) info . -r head | grep '^Revision:' | tr -c -d 0123456789).i386.rpm
$(RPMSDIR)/$(TOOLNAME)-smlnj-$(VERSION)-%.i386.rpm: $(TOOLNAME)-smlnj-$(VERSION)-%.spec $(RPMSRCDIR)/$(TOOLNAME)-$(VERSION)-%.tar.gz
	$(RPMBUILD) -bb $<
$(TOOLNAME)-smlnj-$(VERSION)-%.spec: $(TOOLNAME)-smlnj.spec.in
	sed -e s/@release@/$*/g -e s/@version@/$(VERSION)/g \
	    -e s+@''srcdir@+$(srcdir)+g < $< > $@
%: $(RPMSDIR)/%
	mv $< $@
$(RPMSRCDIR)/%: $(srcdir)/%
	cp $< $@
upload-dist-smlnj-rpm: $(TOOLNAME)-smlnj-$(VERSION)-$(shell $(SVN) info . -r head | grep '^Revision:' | tr -c -d 0123456789).i386.rpm
	scp $< ssh.itu.dk:/import/www/research/theory/bpl/dist/bpltool/
	ssh ssh.itu.dk 'cd /import/www/research/theory/bpl/dist/bpltool/ && make add-rpm-$<'
# CLEAN UP -------------------------------------------------
clean:
	$(RM) *~

parsersclean:
	for g in $(GRMFILES); do $(RM) $$g{.desc,.sig,-sig.sml,.sml}; done
	for l in $(LEXFILES); do $(RM) $$l.sml; done


CMDIRS = $(filter-out lib/pp/smlnj lib/compat/common,$(MOSMAKEDIRS))
CMCACHEDIRS = $(MOSMAKEDIRS) lib/compat/smlnj/ lib/compat/smlnj/exception \
	lib/compat/smlnj/thread lib/compat/smlnj/word32
cmclean:
	for d in $(CMDIRS); do [ -r $$d/Dependencies ] && $(RM) $$d/sources.cm; done

cmcacheclean:
	for d in $(CMCACHEDIRS); do [ -r $$d/Dependencies ] && $(RM) -r $$d/CM; done

mlbclean:
	$(RM) $(patsubst %/Dependencies,%/mlton.mlb,$(DEPENDENCIES)) 

docclean:
	$(RM) -r kernel/$(DOCSUBDIR) lib/$(DOCSUBDIR) apps/miniml/$(DOCSUBDIR)

realclean: clean cmclean mlbclean parsersclean docclean

distclean: realclean
	$(RM) -r autom4te.cache
	$(RM) $(DISTCLEANFILES)
	$(RM) -r bpltool-`cat VERSION`.*

.PHONY: parsersclean cmclean mlbclean clean realclean distclean
