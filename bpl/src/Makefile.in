# Copyright (c) 2006  The BPL Group at the IT University of Copenhagen
#
# This file is part of BPL.
#
# BPL is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or (at
# your option) any later version.
#
# BPL is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with BPL; if not, write to the Free Software
# Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301
# USA

# $Revision: 1.11 $

# Top makefile for BPL.  Targets include:
#
#   DIRTREE      - a description of the directory tree
#
#   doc          - API documentation for BDNF stuff, etc.
#
#   clean        - remove some mosmake files

@SET_MAKE@

SHELL           = @SHELL@

prefix		= @prefix@
datarootdir	= @datarootdir@
srcdir		= @srcdir@
datadir		= @datadir@
smldocdir	= @smldocdir@

RM              = rm -f
export SED      = @SED@

MOSMLC  	= @MOSMLC@
PERL    	= @PERL@
MLYACC          = @MLYACC@
MLLEX           = @MLLEX@
SMLNJ           = @SMLNJ@
MLTON		= @MLTON@
MLC		= @MLC@
KILL	= /usr/bin/kill

MAKEFILE	= Makefile
EXEEXT		= @EXEEXT@

INSTALL		= @INSTALL@
INSTALL_DATA= @INSTALL_DATA@

MOSMLFLAGS 	= -liberal
DEPENDENCIES    := $(shell find . -name Dependencies)
MOSMAKEDIRS 	:= $(subst ./,, $(patsubst %/Dependencies,%,$(DEPENDENCIES)))
MOSMAKE 	= lib/mosmake

SVN			= svn

DOCSUBDIR	= doc
SMLDOC		= smldoc
SMLDOC-FLAGS	= --overview=overview.html --argfile=smldoc.cfg

ROOTDIR		= ..
THISDIR		= src
MKDIRTREE	= $(PWD)/mkdirtree
DESCFILES	= $(shell find . -name .description)
SMLFILES-kernel	:= $(shell find ./kernel -name CM -prune -a -type f -o -name *.sml)
SMLFILES-lib	:= $(shell find ./lib -name CM -prune -a -type f -o -name *.sml)
SMLFILES-miniml	:= $(shell find ./apps/miniml -name CM -prune -a -type f -o -name *.sml)
CMFILES        	= $(filter-out ./lib/compat/common/sources.cm, $(patsubst %/Dependencies,%/sources.cm,$(DEPENDENCIES)))
CMFILES-kernel	= $(filter ./kernel/%,$(CMFILES))
CMFILES-lib	= $(filter-out ./lib/compat/mosml/thread/sources.cm,$(filter ./lib/%,$(CMFILES)))
CMFILES-miniml	= $(filter ./apps/miniml/%,$(CMFILES))

include $(MOSMAKE)/Makefile.inc


# Files to clean up
CLEANFILES :=
REALCLEANFILES :=
DISTCLEANFILES :=

# Automatic makefil'ing
.PHONY: ajour

ajour: configure $(MAKEFILE)

$(MAKEFILE): Makefile.chain

$(MAKEFILE) Makefile.chain: %: %.in config.status
	./config.status --file=$@ newdeps

config.status: configure
	./config.status --recheck

configure: configure.in
	autoconf

DISTCLEANFILES += config.cache config.log config.status Makefile Makefile.chain mosmake.dep


# Parsers and lexers
GRMFILES := $(shell find . -name '*.grm')
LEXFILES := $(shell find . -name '*.lex')
PARSINGFILES := $(patsubst %.grm,%.grm-sig.sml,$(GRMFILES)) $(patsubst %.grm,%.grm.sml,$(GRMFILES)) $(patsubst %.lex,%.lex.sml,$(LEXFILES))

%.lex.sml: %.lex
	cd $(dir $@) && $(MAKE) $(notdir $@)

%.grm-sig.sml %.grm.sml: %.grm
	cd $(dir $@) && $(MAKE) $(notdir $@)

# SVN
.PHONY: svn-update
svn-update:
	cd .. && $(SVN) update

# Documentation

.PHONY:	all doc doc-kernel doc-lib doc-miniml upload-doc

doc: doc-lib doc-kernel doc-miniml

doc-lib:	lib/$(DOCSUBDIR)/index.html
lib/$(DOCSUBDIR)/index.html: lib/smldoc.cfg lib/overview.html $(CMFILES-lib) $(SMLFILES-lib)
	test -w lib/$(DOCSUBDIR) || mkdir lib/$(DOCSUBDIR)
	cd lib && $(SMLDOC) -d $(DOCSUBDIR) $(SMLDOC-FLAGS) $(subst ./lib/,./,$(CMFILES-lib))

doc-kernel:	kernel/$(DOCSUBDIR)/index.html
kernel/$(DOCSUBDIR)/index.html: kernel/smldoc.cfg kernel/overview.html $(CMFILES-kernel) $(SMLFILES-kernel)
	test -w kernel/$(DOCSUBDIR) || mkdir kernel/$(DOCSUBDIR)
	cd kernel && $(SMLDOC) -d $(DOCSUBDIR) $(SMLDOC-FLAGS) $(subst ./kernel/,./,$(CMFILES-kernel))

doc-miniml:	apps/miniml/$(DOCSUBDIR)/index.html
apps/miniml/$(DOCSUBDIR)/index.html: apps/miniml/smldoc.cfg apps/miniml/overview.html $(CMFILES-miniml) $(SMLFILES-miniml)
	test -w apps/miniml/$(DOCSUBDIR) || mkdir apps/miniml/$(DOCSUBDIR)
	cd apps/miniml && $(SMLDOC) -d $(DOCSUBDIR) $(SMLDOC-FLAGS) $(subst ./apps/miniml/,./,$(CMFILES-miniml))

DIRTREE: $(DESCFILES) $(MKDIRTREE)
	echo "Directory summary (automatically generated, foolish to edit):" > $@
	echo "" >> $@
	cd $(ROOTDIR) && $(MKDIRTREE) $(THISDIR) >> $(THISDIR)/$@

upload-doc: #doc-lib doc-kernel doc-miniml
	@echo '**********************************************************'
	@echo 'Target `upload-doc'"' is deprecated.  To update API docs in"
	@echo the BPL web pages, just commit sml files into the SVN repository.
	@echo 'To install locally, use `make install-doc'"'"
	@exit 1
#	scp kernel/$(DOCSUBDIR)/* ssh.itu.dk:/import/www/research/theory/bpl/doc/ml/doc/kernel/
#	scp lib/$(DOCSUBDIR)/* ssh.itu.dk:/import/www/research/theory/bpl/doc/ml/doc/lib/
#	scp apps/miniml/$(DOCSUBDIR)/* ssh.itu.dk:/import/www/research/theory/bpl/doc/ml/doc/miniml/

.PHONY: install-doc-kernel install-doc-lib install-doc-miniml install-doc
install-doc-lib: doc-lib
	cd lib/$(DOCSUBDIR) && \
	find . -type f -exec $(INSTALL) '{}' '$(smldocdir)/lib/{}' ';'
install-doc-kernel: doc-kernel
	cd kernel/$(DOCSUBDIR) && \
	find . -type f -exec $(INSTALL) '{}' '$(smldocdir)/kernel/{}' ';'
install-doc-miniml: doc-miniml
	cd apps/miniml/$(DOCSUBDIR) && \
	find . -type f -exec $(INSTALL) '{}' '$(smldocdir)/miniml/{}' ';'
install-doc: installdirs $(smldocdir)/index.html install-doc-lib install-doc-kernel install-doc-miniml
$(smldocdir)/index.html: ../www/smldoc-index.html
	$(INSTALL) $< $@
# Make sure all installation directories (e.g. $(smldocdir))
# actually exist by making them if necessary.
.PHONY: installdirs
installdirs: mkinstalldirs
	$(srcdir)/mkinstalldirs $(smldocdir)/lib $(smldocdir)/kernel $(smldocdir)/miniml

# SML/NJ
kernel.cm: kernel.cm.in
	$(SED) -e 's+@BPLSRCROOT@+$(CURDIR)+g' < $< > $@

%/sources.cm: %/Dependencies
	cd $(dir $@) && $(MAKE) $(notdir $@)

# MLton
%/mlton.mlb: %/Dependencies
	cd $(dir $@) && $(MAKE) $(notdir $@)

smlnj-prepare: $(CMFILES)
mlton-prepare: $(patsubst %/Dependencies,%/mlton.mlb,$(DEPENDENCIES)) $(PARSINGFILES)

.PHONY: smlnj-prepare mlton-prepare

# Testing
check: test

test: test-$(MLC)

test-smlnj: smlnj-prepare
	echo "val pwd = OS.FileSys.getDir ();\
	      val _   = OS.FileSys.chDir \"lib/compat/smlnj/\";\
	      use \"cmmakedefine.sml\";\
              val _   = OS.FileSys.chDir pwd;\
              CM_make \"test/sources.cm\"" | $(SMLNJ)

test-mosml: unittest
	./unittest

test-mlton: mlton-prepare $(PARSINGFILES)
	$(MLTON) test/mlton.mlb && test/mlton

.PHONY:	check test test-smlnj test-mosml test-mlton

# Web application
test-webapp: test-webapp-mlton

test-webapp-smlnj: smlnj-prepare $(PARSINGFILES)
	echo "CM.make' \"apps/bplweb/backend/sources.cm\";" | $(SMLNJ)

test-webapp-mosml: bplwebback
	apps/bplweb/backend/bplwebback < apps/bplweb/backend/test/matching1.cmd

test-webapp-mlton: mlton-prepare $(PARSINGFILES)
	$(MLTON) apps/bplweb/backend/mlton.mlb
	apps/bplweb/backend/mlton < apps/bplweb/backend/test/matching1.cmd

upload-webapp: apps/bplweb/backend/mlton
	scp $< ssh.itu.dk:/import/stud/share/projects/bpl/work/bpl/src/apps/bplweb/backend/mlton

restart-webapp:
	pid=`ps -Af | grep '[r]uby bplxmlrpcserver.rb' | sed 's/^[^ ][^ ]*  *\([0-9][0-9]*\).*/\1/'; \
	echo kill $pid
	cd apps/bplweb/xmlrpcserver && $(RUBY) bplxmlrpcserver.rb

.PHONY: test-webapp upload-webapp restart-webapp test-webapp-smlnj test-webapp-mosml test-webapp-mlton
# Clean up
clean:
	$(RM) *~ 

parsersclean:
	for g in $(GRMFILES); do $(RM) $$g{.desc,.sig,-sig.sml,.sml}; done
	for l in $(LEXFILES); do $(RM) $$l.sml; done


CMDIRS = $(filter-out lib/pp/smlnj lib/compat/common,$(MOSMAKEDIRS))
cmclean:
	for d in $(CMDIRS); do [ -r $$d/Dependencies ] && $(RM) -f $$d/sources.cm; done

mlbclean:
	$(RM) $(patsubst %/Dependencies,%/mlton.mlb,$(DEPENDENCIES)) 

docclean:
	$(RM) -r kernel/$(DOCSUBDIR) lib/$(DOCSUBDIR) apps/miniml/$(DOCSUBDIR)

realclean: clean cmclean mlbclean parsersclean docclean

distclean: realclean
	$(RM) -rf autom4te.cache
	$(RM) $(DISTCLEANFILES)

.PHONY: parsersclean cmclean mlbclean clean realclean distclean
