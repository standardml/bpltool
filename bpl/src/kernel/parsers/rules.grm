(* Simple grammar file for ML-Yacc (SML/NJ) defining the parser 
   for reaction rules. 

   Functionality - for now - just read a file containing a single dec 
   on the form:

   bg

   Syntax and grammar summary :

   bg := <->
      |  merge(n)
      |  `nset`
      |  name/name 
      |  -/name 
      |  name//nset
      |  -//nset
      |  ctrlid <nlist> <nsetlist>
      |  ctrlid <nlist>
      |  ctrlid
      |  @[ permentrylist ]
      |  @@[ permentrylist ]
      |  <nset> bg
      |  bg * bg
      |  bg <|> bg
      |  bg || bg
      |  bg o bg
  
   nsetlist      = [nsets]
                 | []
   
   nsets         = nset
	         | nset, nsets

   nset          = [names]
                 | []

   names         = name
	         | name, names

   permentrylist = [permentries]
                 | []
   
   permentries   = permentry 
		 | permentry, permentrylist

   permentry     = int & nset
                 | int
   
   name   = [a-n|p-v|yz]
          | [a-z][A-za-z0-9_]+

   (single o and * are keywords)

   ctrlid  = [A-Z][A-za-z0-9_]*

   - and ML-style comments (* ... *) 

-----

  Precedences (with tightest binding at bottom):

  ( )         abstraction
  *, <|>, ||  tensor product, prime product, parallel product
  o           composition

-----

Notes:
-  For now, I'm just creating a fresh ctrl for each
   ion - hence ctrl-eq must be tested by testing constituent parts.
   Change datatype bg (and this call) to let ions point to a common ctrl-def.
-  Tensor product XX is parsed as if it was a binary operator
   (as are prime product and parallel product)
-  Nice-to-have extended forms : 
     id_iface      =>  id on iface - iface
     id		   =>  (not only grammar issue) 
			- id that can be instatiated to 
     'nlist'       => '{nlist}'
*)

(* Position info stuff - below *)

open BgTerm

type control = Control.control
type kind = Control.kind
type name = Name.name
type link = Link.link
type nameset = NameSet.Set
type linkset = LinkSet.Set
type ion = Ion.ion
type 'kind permutation = 'kind Permutation.permutation
type map = (int * name list) * (int * name list)
type inst = Instantiation.inst
type rule = {
  name : string,
  redex : bgterm,
  react : bgterm,
  maps : map list,
  info : info}
datatype fieldval = REDEX    of bgterm
                  | REACT    of bgterm
                  | INST     of map list * (int * int)
                  | RULENAME of string
type rulefield = {name : string, value : fieldval}
datatype parserresult
  = BGTERMRESULT of bgterm
  | RULESRESULT of rule list
  | SIGRESULT of control list

(** Signal that a set with duplicate names has been encountered. 
 * @params smlfile leftpos rightpos errtxt
 * @param smlfile   SML file with the code that encountered the error.
 * @param leftpos   Position of lefthand side of error term.
 * @param rightpos  Position of righthand side of error term.
 * @param errtxt    Text detailing the error.
*)
exception DuplicateNames of string * (int * int) * string

exception UnknownField of string * (int * int)

exception WrongFieldType of int * int

exception RedexOrReactMissing of int * int

fun warning str v = (print ("Parser warning: "^str^"\n"); v)

fun mk_origin p1 p2
  = Origin.mk_file_origin
      (!ErrorMsg.fileName)
      (Origin.POS (ErrorMsg.toCoords p1 p2))

fun mk_info p1 p2 = Info.make (mk_origin p1 p2)

val nextruleno = ref 0
fun mk_rule (rulefields, (left, right)) =
  let
    fun populate {name = NONE, redex, react, inst, info} []
      = populate
         {name = SOME (Int.toString (!nextruleno)
                       before nextruleno := !nextruleno + 1),
          redex = redex, react = react, inst = inst, info = info} []
      | populate {name, redex, react, inst = NONE, info} []
      = populate {name = name, redex = redex,
                  react = react, inst = SOME [], info = info} []
      | populate {name = SOME name, redex = SOME redex,
                  react = SOME react, inst = SOME inst, info} []
      = {name = name, redex = redex, react = react,
        maps = inst, info = info}
      | populate _ [] = raise RedexOrReactMissing (left, right)
      | populate {name, redex, react, inst, info}
                 ((RULENAME name', _) :: rulefields)
      = populate {name = SOME name', redex = redex,
                  react = react, inst = inst, info = info} rulefields
      | populate {name, redex, react, inst, info}
                 ((REDEX   redex', _) :: rulefields)
      = populate {name = name, redex = SOME redex',
                  react = react, inst = inst, info = info} rulefields
      | populate {name, redex, react, inst, info}
                 ((REACT   react', _) :: rulefields)
      = populate {name = name, redex = redex,
                  react = SOME react', inst = inst, info = info} rulefields
      | populate {name, redex, react, inst, info}
                 ((INST (inst', p'), _) :: rulefields)
      = populate {name = name, redex = redex, react = react,
                  inst = SOME inst', info = info} rulefields
  in
    populate
      {name = NONE, redex = NONE, react = NONE, inst = NONE,
       info = mk_info left right}
      rulefields
  end

fun nset2idlinkset nset =
    NameSet.fold 
      (fn name => 
	  fn links =>
	     LinkSet.insert
	       (Link.make {outer = SOME name, 
			   inner = NameSet.singleton name}) 
	       links)
      LinkSet.empty
      nset

%%
%term EOF | BGTERM | RULELIST | SIGNATURE
	 | ID of string | INT of int | CTRLID of string | STRING of string
	 | ACTIVE | PASSIVE | ATOMIC
	 | AMP | EQ | MAPSTO | MAPPSTO | DASHCOLON | EQCOLON | RARROW
	 | NAME | REDEX | REACT | INST
	 | MERGE
	 | LPAREN | RPAREN | LBRACK | RBRACK | LBRACE | RBRACE | GT | LT
	 | SLASH | SLASHSLASH | DASHSLASH | DASHSLASHSLASH
	 | OO | XX | PRI | PAR | QUOTE | BQUOTE | COMMA
         | IDX0 | IDBB0 | ONE | IDW | IDW0 | IDP

%nonterm
  start of parserresult
| ctrl of control
| ctrllist of control list
| ctrls of control list
| kind of kind
| cdata of (string * int * int)
| rule of rule
| rulelist of rule list
| rules of rule list
| rulefield of fieldval
| rulefields of (fieldval * (int * int)) list
| inst of map list * (int * int)
| map of map
| maps of map list
| bg of bgterm
| altbg of bgterm
| fports of name list
| nlist of name list
| names of name list
| bports of nameset list
| nsetlist of nameset list
| nset of nameset
| ctrlid of control
| link of link
| perm of Immutable permutation
| permentrylist of (int * nameset) list
| permentry of (int * nameset)
| id of string
| pint of int
| int of int

%pos int
%verbose
%start start
%eop EOF
%noshift EOF

%name Rules

%header (functor RulesLrVals
		   (structure Info : INFO
		    structure Token : TOKEN
		    structure Interface : INTERFACE
		    structure Control : CONTROL
		    structure Name : NAME
		    structure NameSet : MONO_SET
		    structure Link : LINK
		    structure LinkSet : MONO_SET
		    structure Wiring : WIRING
		    structure Ion : ION
		    structure Permutation : PERMUTATION
		    structure BgTerm : BGTERM
		    structure BgVal : BGVAL
		    structure BgBDNF : BGBDNF
		    structure Instantiation : INSTANTIATION
		    sharing type Control.control = Ion.control
		    sharing type Interface.interface = Instantiation.interface
		    sharing type Name.name = 
				 NameSet.elt = 
				 Instantiation.name = 
				 Link.name =
				 Ion.name
		    sharing type NameSet.Set =
				 Interface.nameset =
				 Link.nameset =
				 Ion.nameset =
				 Permutation.nameset =
				 BgTerm.nameset
		    sharing type Link.link = LinkSet.elt
		    sharing type LinkSet.Set = Wiring.linkset
		    sharing type Wiring.wiring = BgTerm.wiring
		    sharing type Ion.ion = BgTerm.ion
		    sharing type Permutation.permutation =
				 BgTerm.permutation
		    sharing type Permutation.Immutable =
		                 BgTerm.Immutable
                    sharing type Info.info =
                                 BgTerm.info =
                                 BgVal.info
                    sharing type BgTerm.bgterm = BgVal.bgterm
                    sharing type BgVal.bgval = BgBDNF.bgval
                    sharing type BgBDNF.interface =
                                 BgVal.interface =
                                 Instantiation.interface
		    )
	)

%keyword 

%left COMMA
%nonassoc LPAREN RPAREN
%nonassoc LT GT
%left XX PRI PAR
%left OO
%nonassoc LBRACE RBRACE
%left SLASH

%%
start : BGTERM bg             (BGTERMRESULT bg)
      | RULELIST rulelist     (RULESRESULT rulelist)
      | SIGNATURE ctrllist    (SIGRESULT ctrllist)

ctrllist : LBRACK ctrls RBRACK (ctrls)
         | LBRACK RBRACK      ([])

ctrls : ctrl                  ([ctrl])
      | ctrl COMMA ctrls      (ctrl :: ctrls)

ctrl : kind LPAREN cdata RPAREN
                              (Control.make
                                 (#1 cdata, kind, #2 cdata, #3 cdata))

kind : ACTIVE                 (Control.Active)
     | PASSIVE                (Control.Passive)
     | ATOMIC                 (Control.Atomic)

cdata : CTRLID                ((CTRLID, 0, 0))
      | CTRLID DASHCOLON int  ((CTRLID, 0, int))
      | CTRLID EQCOLON int RARROW int
                              ((CTRLID, int1, int2))

rulelist : LBRACK rules RBRACK (rules)
         | LBRACK RBRACK      ([])
         
rules : rule                  ([rule])
      | rule COMMA rules      (rule :: rules)

rule : LBRACE rulefields RBRACE
                              (mk_rule (rulefields,
                                        (LBRACEleft, RBRACEright)))

rulefields : rulefield        ([(rulefield, (rulefieldleft, rulefieldright))])
           | rulefield COMMA rulefields
                              ((rulefield, (rulefieldleft, rulefieldright))
                               :: rulefields)

rulefield : REDEX EQ bg       (REDEX bg)
          | REACT EQ bg       (REACT bg)
          | INST EQ inst      (INST inst)
          | NAME EQ STRING    (RULENAME STRING)

inst : LBRACK maps RBRACK     ((maps, (LBRACKleft, RBRACKright)))
     | LBRACK RBRACK          (([], (LBRACKleft, RBRACKright)))

maps : map                    ([map])
     | map COMMA maps         (map :: maps)

map : int MAPSTO int          (((int1, []), (int2, [])))
    | int AMP nlist MAPPSTO int AMP nlist
                              (((int1, nlist1), (int2, nlist2)))

bg : altbg                    (altbg)
   | bg XX bg                 (Ten ([bg1, bg2], mk_info bg1left bg2right))
   | bg PRI bg                (Pri ([bg1, bg2], mk_info bg1left bg2right))
   | bg PAR bg                (Par ([bg1, bg2], mk_info bg1left bg2right))
   | bg OO bg                 (Com (bg1, bg2, mk_info bg1left bg2right))

altbg : ONE                   (Mer (0, mk_info ONEright ONEleft))
   | IDX0                     (Ten ([], mk_info IDX0left IDX0right))
   | IDBB0                    (Par ([], mk_info IDBB0left IDBB0right))
   | MERGE pint               (Mer (pint, mk_info MERGEleft pintright))
   | BQUOTE nset BQUOTE       (Con (nset, mk_info BQUOTE1left BQUOTE2right))
   | link                     (Wir (Wiring.make 
				      (LinkSet.singleton link), 
				      mk_info linkleft linkright))
   | IDW nset                 (Wir (Wiring.make (nset2idlinkset nset),
				    mk_info IDWleft IDWright))
   | IDW0                     (Wir (Wiring.id_0, mk_info IDW0left IDW0right))
   | ctrlid fports bports     (let 
				 val fp = fports
				 val bp = bports
			       in
				 Ion (Ion.make 
					({ctrl = ctrlid, 
					  free = fports,
					  bound = bports}),
					mk_info ctrlidleft bportsright)
			       end)
   | ctrlid fports            (let 
				 val fp = fports
			       in
				 Ion (Ion.make 
					({ctrl = ctrlid, 
					  free = fports,
					  bound = []}),
					mk_info ctrlidleft fportsright)
			       end)
   | ctrlid                   (Ion (Ion.make 
					({ctrl = ctrlid, 
					  free = [],
					  bound = []}),
					mk_info ctrlidleft ctrlidright))
   | perm                     (Per (perm, mk_info permleft permright))
   | IDP pint                 (Per (Permutation.id_n pint, mk_info IDPleft pintright))
   | LT nset GT bg    (Abs (nset, bg, mk_info LTleft bgright))
   | LPAREN bg RPAREN         (bg)

fports	: LBRACK names RBRACK (names)

names   : id COMMA names      (Name.make id :: names)
        | id		      ([Name.make id])
        |		      ([])

id      : ID                  (ID)
        | IDX0                ("idx0")
        | IDW                 ("idw")
        | IDW0                ("idw0")
        | MERGE               ("merge")
        | IDP                 ("idp")
        | NAME                ("name")
        | REDEX               ("redex")
        | REACT               ("react")
        | INST                ("inst")

bports	: LBRACK nsetlist RBRACK      (nsetlist)

nsetlist : nset COMMA nsetlist (nset :: nsetlist)
	 | nset		      ([nset])
         |		      ([])

nlist   : LBRACK names RBRACK (names)

nset    : LBRACK names RBRACK (NameSet.fromList (names)
			       handle NameSet.DuplicatesRemoved
				      => raise 
					DuplicateNames 
					  ("bg.grm", (LBRACKleft, RBRACKright),
					   "while parsing"))

ctrlid	: CTRLID	      (Control.make (CTRLID, Control.Active, 0, 0))

link	: DASHSLASHSLASH nset	        (Link.make {outer = NONE, inner = nset})
        | id SLASH id	%prec SLASH	(Link.make {outer = SOME (Name.make id1), 
						    inner = NameSet.singleton (Name.make id2)})
	| DASHSLASH id			(Link.make {outer = NONE, 
						    inner = NameSet.singleton (Name.make id)})
	| id SLASHSLASH nset	        (Link.make {outer = SOME (Name.make id), inner = nset})

perm	: LBRACK permentrylist RBRACK	        (Permutation.make permentrylist)

permentrylist : permentry COMMA permentrylist   (permentry :: permentrylist)
	      | permentry                       ([permentry])
	      |                                 ([]) 

permentry : int AMP nset			((int, nset))
	  | int					((int, NameSet.empty))

pint : int                                      (int)
     | LPAREN pint RPAREN                       (pint)

int : INT                                       (INT)
    | ONE                                       (1)
