<?xml version="1.0" encoding="UTF-8"?>
<xsd:schema
    elementFormDefault="qualified"
    blockDefault="#all"
    xmlns="http://docs.oasis-open.org/wsbpel/2.0/process/executable"
    targetNamespace="http://docs.oasis-open.org/wsbpel/2.0/process/executable"
    xmlns:xsd="http://www.w3.org/2001/XMLSchema">
  <xsd:annotation>
    <xsd:documentation>
      This is the schema for Core BPEL, a subset of WS-BPEL.  This
      Schema is a modified version of the original WS-BPEL XML Schema,
      excluding implicit activities, extensions and making default
      values mandatory.
    </xsd:documentation>
  </xsd:annotation>
  <xsd:import namespace="http://www.w3.org/XML/1998/namespace"
              schemaLocation="http://www.w3.org/2001/xml.xsd"/>
  <xsd:element name="process" type="tProcess">
    <xsd:annotation>
      <xsd:documentation>
        This is the root element for a Core BPEL process.
      </xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType name="tProcess">
    <xsd:sequence>
      <xsd:element maxOccurs="unbounded" minOccurs="0" ref="import"/>
      <xsd:element minOccurs="1" ref="scope"/>
    </xsd:sequence>
    <xsd:attribute name="name" type="xsd:NCName" use="required"/>
    <xsd:attribute name="targetNamespace" type="xsd:anyURI" use="required"/>
  </xsd:complexType>
  <xsd:group name="activity">
    <xsd:annotation>
      <xsd:documentation>
        All Core BPEL activities in alphabetical order.
        Basic activities and structured activities. Addtional
        constraints: - rethrow activity can be used ONLY within a
        fault handler (i.e. "catch" and "catchAll" element) -
        compensate or compensateScope activity can be used ONLY within
        a fault handler, a compensation handler or a termination
        handler
      </xsd:documentation>
    </xsd:annotation>
    <xsd:choice>
      <xsd:element ref="assign"/>
      <xsd:element ref="compensate"/>
      <xsd:element ref="compensateScope"/>
      <xsd:element ref="empty"/>
      <xsd:element ref="exit"/>
      <xsd:element ref="flow"/>
      <xsd:element ref="forEach"/>
      <xsd:element ref="if"/>
      <xsd:element ref="invoke"/>
      <xsd:element ref="pick"/>
      <xsd:element ref="repeatUntil"/>
      <xsd:element ref="reply"/>
      <xsd:element ref="rethrow"/>
      <xsd:element ref="scope"/>
      <xsd:element ref="throw"/>
      <xsd:element ref="validate"/>
      <xsd:element ref="wait"/>
    </xsd:choice>
  </xsd:group>
  <xsd:element name="import" type="tImport"/>
  <xsd:complexType name="tImport">
    <xsd:attribute name="namespace" type="xsd:anyURI" use="optional"/>
    <xsd:attribute name="location" type="xsd:anyURI" use="optional"/>
    <xsd:attribute name="importType" type="xsd:anyURI" use="required"/>
  </xsd:complexType>
  <xsd:element name="partnerLinks" type="tPartnerLinks"/>
  <xsd:complexType name="tPartnerLinks">
    <xsd:sequence>
      <xsd:element maxOccurs="unbounded" ref="partnerLink"/>
    </xsd:sequence>
  </xsd:complexType>
  <xsd:element name="partnerLink" type="tPartnerLink"/>
  <xsd:complexType name="tPartnerLink">
    <xsd:attribute name="name" type="xsd:NCName" use="required"/>
    <xsd:attribute name="partnerLinkType" type="xsd:QName" use="required"/>
    <xsd:attribute name="myRole" type="xsd:NCName"/>
    <xsd:attribute name="partnerRole" type="xsd:NCName"/>
    <xsd:attribute name="initializePartnerRole" type="tBoolean"/>
  </xsd:complexType>
  <xsd:element name="messageExchanges" type="tMessageExchanges"/>
  <xsd:complexType name="tMessageExchanges">
    <xsd:sequence>
      <xsd:element maxOccurs="unbounded" ref="messageExchange"/>
    </xsd:sequence>
  </xsd:complexType>
  <xsd:element name="messageExchange" type="tMessageExchange"/>
  <xsd:complexType name="tMessageExchange">
    <xsd:attribute name="name" type="xsd:NCName" use="required"/>
  </xsd:complexType>
  <xsd:element name="variables" type="tVariables"/>
  <xsd:complexType name="tVariables">
    <xsd:sequence>
      <xsd:element maxOccurs="unbounded" ref="variable"/>
    </xsd:sequence>
  </xsd:complexType>
  <xsd:element name="variable" type="tVariable"/>
  <xsd:complexType name="tVariable">
    <xsd:attribute name="name" type="BPELVariableName" use="required"/>
    <xsd:attribute name="messageType" type="xsd:QName" use="optional"/>
    <xsd:attribute name="type" type="xsd:QName" use="optional"/>
    <xsd:attribute name="element" type="xsd:QName" use="optional"/>
  </xsd:complexType>
  <xsd:simpleType name="BPELVariableName">
    <xsd:restriction base="xsd:NCName">
      <xsd:pattern value="[^\.]+"/>
    </xsd:restriction>
  </xsd:simpleType>
  <xsd:element name="correlationSets" type="tCorrelationSets"/>
  <xsd:complexType name="tCorrelationSets">
    <xsd:sequence>
      <xsd:element maxOccurs="unbounded" ref="correlationSet"/>
    </xsd:sequence>
  </xsd:complexType>
  <xsd:element name="correlationSet" type="tCorrelationSet"/>
  <xsd:complexType name="tCorrelationSet">
    <xsd:attribute name="properties" type="QNames" use="required"/>
    <xsd:attribute name="name" type="xsd:NCName" use="required"/>
  </xsd:complexType>
  <xsd:simpleType name="QNames">
    <xsd:restriction>
      <xsd:simpleType>
        <xsd:list itemType="xsd:QName"/>
      </xsd:simpleType>
      <xsd:minLength value="1"/>
    </xsd:restriction>
  </xsd:simpleType>
  <xsd:element name="faultHandlers" type="tFaultHandlers"/>
  <xsd:complexType name="tFaultHandlers">
    <xsd:sequence>
      <xsd:element maxOccurs="unbounded" minOccurs="0" ref="catch"/>
      <xsd:element minOccurs="0" ref="catchAll"/>
    </xsd:sequence>
  </xsd:complexType>
  <xsd:element name="catch" type="tCatch">
    <xsd:annotation>
      <xsd:documentation>
        This element can contain all activities including the
        activities compensate, compensateScope and rethrow.
      </xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType name="tCatch">
    <xsd:complexContent>
      <xsd:extension base="tActivityContainer">
        <xsd:attribute name="faultName" type="xsd:QName"/>
        <xsd:attribute name="faultVariable" type="BPELVariableName"/>
        <xsd:attribute name="faultMessageType" type="xsd:QName"/>
        <xsd:attribute name="faultElement" type="xsd:QName"/>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="catchAll" type="tActivityContainer">
    <xsd:annotation>
      <xsd:documentation>
        This element can contain all activities including the
        activities compensate, compensateScope and rethrow.
      </xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType name="tActivityContainer">
    <xsd:sequence>
      <xsd:group ref="activity"/>
    </xsd:sequence>
  </xsd:complexType>
  <xsd:element name="eventHandlers" type="tEventHandlers"/>
  <xsd:complexType name="tEventHandlers">
    <xsd:annotation>
      <xsd:documentation>
        XSD Authors: The child element onAlarm needs to be a Local
        Element Declaration, because there is another onAlarm element
        defined for the pick activity.
      </xsd:documentation>
    </xsd:annotation>
    <xsd:sequence>
      <xsd:element maxOccurs="unbounded" minOccurs="0" ref="onEvent"/>
      <xsd:element name="onAlarm" type="tOnAlarmEvent"
                   maxOccurs="unbounded" minOccurs="0"/>
    </xsd:sequence>
  </xsd:complexType>
  <xsd:element name="onEvent" type="tOnEvent"/>
  <xsd:complexType name="tOnEvent">
    <xsd:complexContent>
      <xsd:extension base="tOnMsgCommon">
        <xsd:sequence>
          <xsd:element ref="scope"/>
        </xsd:sequence>
        <xsd:attribute name="messageType" type="xsd:QName" use="optional"/>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="tOnMsgCommon">
    <xsd:annotation>
      <xsd:documentation>
        XSD Authors: The child element correlations needs to be a
        Local Element Declaration, because there is another
        correlations element defined for the invoke activity.
      </xsd:documentation>
    </xsd:annotation>
    <xsd:sequence>
      <xsd:element name="correlations" type="tCorrelations" minOccurs="0"/>
    </xsd:sequence>
    <xsd:attribute name="partnerLink" type="xsd:NCName" use="required"/>
    <xsd:attribute name="operation" type="xsd:NCName" use="required"/>
    <xsd:attribute name="messageExchange" type="xsd:NCName" use="required"/>
    <xsd:attribute name="variable" type="BPELVariableName" use="optional"/>
  </xsd:complexType>
  <xsd:complexType name="tCorrelations">
    <xsd:annotation>
      <xsd:documentation>
        XSD Authors: The child element correlation needs to be a Local
        Element Declaration, because there is another correlation
        element defined for the invoke activity.
      </xsd:documentation>
    </xsd:annotation>
    <xsd:sequence>
      <xsd:element name="correlation" type="tCorrelation"
                   maxOccurs="unbounded"/>
    </xsd:sequence>
  </xsd:complexType>
  <xsd:complexType name="tCorrelation">
    <xsd:attribute name="set" type="xsd:NCName" use="required"/>
    <xsd:attribute name="initiate" type="tInitiate" use="required"/>
  </xsd:complexType>
  <xsd:simpleType name="tInitiate">
    <xsd:restriction base="xsd:string">
      <xsd:enumeration value="yes"/>
      <xsd:enumeration value="join"/>
      <xsd:enumeration value="no"/>
    </xsd:restriction>
  </xsd:simpleType>
  <xsd:complexType name="tOnAlarmEvent">
    <xsd:sequence>
      <xsd:choice>
        <xsd:sequence>
          <xsd:group ref="forOrUntilGroup"/>
          <xsd:element minOccurs="0" ref="repeatEvery"/>
        </xsd:sequence>
        <xsd:element ref="repeatEvery"/>
      </xsd:choice>
      <xsd:element ref="scope"/>
    </xsd:sequence>
  </xsd:complexType>
  <xsd:group name="forOrUntilGroup">
    <xsd:choice>
      <xsd:element ref="for"/>
      <xsd:element ref="until"/>
    </xsd:choice>
  </xsd:group>
  <xsd:element name="for" type="tDuration-expr"/>
  <xsd:element name="until" type="tDeadline-expr"/>
  <xsd:element name="repeatEvery" type="tDuration-expr"/>
  <xsd:element name="targets" type="tTargets"/>
  <xsd:complexType name="tTargets">
    <xsd:sequence>
      <xsd:element minOccurs="1" ref="joinCondition"/>
      <xsd:element maxOccurs="unbounded" ref="target"/>
    </xsd:sequence>
  </xsd:complexType>
  <xsd:element name="joinCondition" type="tCondition"/>
  <xsd:element name="target" type="tTarget"/>
  <xsd:complexType name="tTarget">
    <xsd:attribute name="linkName" type="xsd:NCName" use="required"/>
  </xsd:complexType>
  <xsd:element name="sources" type="tSources"/>
  <xsd:complexType name="tSources">
    <xsd:sequence>
      <xsd:element maxOccurs="unbounded" ref="source"/>
    </xsd:sequence>
  </xsd:complexType>
  <xsd:element name="source" type="tSource"/>
  <xsd:complexType name="tSource">
    <xsd:sequence>
      <xsd:element minOccurs="1" ref="transitionCondition"/>
    </xsd:sequence>
    <xsd:attribute name="linkName" type="xsd:NCName" use="required"/>
  </xsd:complexType>
  <xsd:element name="transitionCondition" type="tCondition"/>
  <xsd:element name="assign" type="tAssign"/>
  <xsd:complexType name="tAssign">
    <xsd:sequence>
      <xsd:choice maxOccurs="unbounded">
        <xsd:element ref="copy"/>
      </xsd:choice>
    </xsd:sequence>
    <xsd:attribute name="validate" type="tBoolean" use="required"/>
  </xsd:complexType>
  <xsd:element name="copy" type="tCopy"/>
  <xsd:complexType name="tCopy">
    <xsd:sequence>
      <xsd:element ref="from"/>
      <xsd:element ref="to"/>
    </xsd:sequence>
    <xsd:attribute name="keepSrcElementName" type="tBoolean" use="optional"/>
    <xsd:attribute name="ignoreMissingFromData" type="tBoolean"
                   use="required"/>
  </xsd:complexType>
  <xsd:element name="from" type="tFrom" />
  <xsd:complexType name="tFrom" mixed="true">
    <xsd:sequence>
      <xsd:any namespace="##other" processContents="lax" minOccurs="0"
        maxOccurs="unbounded" />
      <xsd:choice minOccurs="0">
        <xsd:element ref="literal" />
        <xsd:element ref="query" />
      </xsd:choice>
    </xsd:sequence>
    <xsd:attribute name="expressionLanguage" type="xsd:anyURI" />
    <xsd:attribute name="variable" type="BPELVariableName"/>
    <xsd:attribute name="part" type="xsd:NCName"/>
    <xsd:attribute name="property" type="xsd:QName"/>
    <xsd:attribute name="partnerLink" type="xsd:NCName"/>
    <xsd:attribute name="endpointReference" type="tRoles"/>
  </xsd:complexType>
  <xsd:element name="literal" type="tLiteral"/>
  <xsd:complexType name="tLiteral" mixed="true">
    <xsd:sequence>
      <xsd:any namespace="##any" minOccurs="0" processContents="lax"/>
    </xsd:sequence>
  </xsd:complexType>
  <xsd:element name="query" type="tQuery"/>
  <xsd:complexType name="tQuery">
    <xsd:sequence>
      <xsd:any processContents="lax" minOccurs="0" maxOccurs="unbounded" />
    </xsd:sequence>
    <xsd:attribute name="queryLanguage" type="xsd:anyURI" />
    <xsd:anyAttribute namespace="##other" processContents="lax" />
  </xsd:complexType>
  <xsd:simpleType name="tRoles">
    <xsd:restriction base="xsd:string">
      <xsd:enumeration value="myRole"/>
      <xsd:enumeration value="partnerRole"/>
    </xsd:restriction>
  </xsd:simpleType>
  <xsd:element name="to" type="tTo"/>
  <xsd:complexType name="tTo" mixed="true">
    <xsd:sequence>
      <xsd:element minOccurs="0" ref="query"/>
    </xsd:sequence>
    <xsd:attribute name="expressionLanguage" type="xsd:anyURI" />
    <xsd:attribute name="variable" type="BPELVariableName"/>
    <xsd:attribute name="part" type="xsd:NCName"/>
    <xsd:attribute name="property" type="xsd:QName"/>
    <xsd:attribute name="partnerLink" type="xsd:NCName"/>
  </xsd:complexType>
  <xsd:element name="compensate" type="tCompensate"/>
  <xsd:complexType name="tCompensate"/>
  <xsd:element name="compensateScope" type="tCompensateScope"/>
  <xsd:complexType name="tCompensateScope">
    <xsd:attribute name="target" type="xsd:NCName" use="required"/>
  </xsd:complexType>
  <xsd:element name="empty" type="tEmpty"/>
  <xsd:complexType name="tEmpty"/>
  <xsd:element name="exit" type="tExit"/>
  <xsd:complexType name="tExit"/>
  <xsd:element name="flow" type="tFlow"/>
  <xsd:complexType name="tFlow">
    <xsd:sequence>
      <xsd:element minOccurs="0" ref="targets"/>
      <xsd:element minOccurs="0" ref="sources"/>
      <xsd:element minOccurs="0" ref="links"/>
      <xsd:group maxOccurs="unbounded" ref="activity"/>
    </xsd:sequence>
    <xsd:attribute name="name" type="xsd:NCName" use="required"/>
    <xsd:attribute name="suppressJoinFailure" type="tBoolean" use="required"/>
  </xsd:complexType>
  <xsd:element name="links" type="tLinks"/>
  <xsd:complexType name="tLinks">
    <xsd:sequence>
      <xsd:element maxOccurs="unbounded" ref="link"/>
    </xsd:sequence>
  </xsd:complexType>
  <xsd:element name="link" type="tLink"/>
  <xsd:complexType name="tLink">
    <xsd:attribute name="name" type="xsd:NCName" use="required"/>
  </xsd:complexType>
  <xsd:element name="forEach" type="tForEach"/>
  <xsd:complexType name="tForEach">
    <xsd:sequence>
      <xsd:element ref="startCounterValue"/>
      <xsd:element ref="finalCounterValue"/>
      <xsd:element minOccurs="0" ref="completionCondition"/>
      <xsd:element ref="scope"/>
    </xsd:sequence>
    <xsd:attribute name="counterName" type="BPELVariableName" use="required"/>
    <xsd:attribute name="parallel" type="tBoolean" use="required"/>
  </xsd:complexType>
  <xsd:element name="startCounterValue" type="tExpression"/>
  <xsd:element name="finalCounterValue" type="tExpression"/>
  <xsd:element name="completionCondition" type="tCompletionCondition"/>
  <xsd:complexType name="tCompletionCondition">
    <xsd:sequence>
      <xsd:element minOccurs="0" ref="branches"/>
    </xsd:sequence>
  </xsd:complexType>
  <xsd:element name="branches" type="tBranches"/>
  <xsd:complexType name="tBranches">
    <xsd:complexContent>
      <xsd:extension base="tExpression">
        <xsd:attribute name="successfulBranchesOnly" type="tBoolean"
                       use="required"/>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="if" type="tIf"/>
  <xsd:complexType name="tIf">
    <xsd:sequence>
      <xsd:element ref="condition"/>
      <xsd:group ref="activity"/>
      <xsd:element ref="else"/>
    </xsd:sequence>
  </xsd:complexType>
  <xsd:element name="else" type="tActivityContainer"/>
  <xsd:element name="invoke" type="tInvoke"/>
  <xsd:complexType name="tInvoke">
    <xsd:annotation>
      <xsd:documentation>
        XSD Authors: The child element correlations needs to be a
        Local Element Declaration, because there is another
        correlations element defined for the non-invoke activities.
      </xsd:documentation>
    </xsd:annotation>
    <xsd:sequence>
      <xsd:element name="correlations" type="tCorrelationsWithPattern"
                   minOccurs="0"/>
    </xsd:sequence>
    <xsd:attribute name="partnerLink" type="xsd:NCName" use="required"/>
    <xsd:attribute name="operation" type="xsd:NCName" use="required"/>
    <xsd:attribute name="inputVariable" type="BPELVariableName"
                   use="optional"/>
    <xsd:attribute name="outputVariable" type="BPELVariableName"
                   use="optional"/>
  </xsd:complexType>
  <xsd:complexType name="tCorrelationsWithPattern">
    <xsd:annotation>
      <xsd:documentation>
        XSD Authors: The child element correlation needs to be a Local
        Element Declaration, because there is another correlation
        element defined for the non-invoke activities.
      </xsd:documentation>
    </xsd:annotation>
    <xsd:sequence>
      <xsd:element name="correlation" type="tCorrelationWithPattern"
                   maxOccurs="unbounded"/>
    </xsd:sequence>
  </xsd:complexType>
  <xsd:complexType name="tCorrelationWithPattern">
    <xsd:complexContent>
      <xsd:extension base="tCorrelation">
        <xsd:attribute name="pattern" type="tPattern"/>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:simpleType name="tPattern">
    <xsd:restriction base="xsd:string">
      <xsd:enumeration value="request"/>
      <xsd:enumeration value="response"/>
      <xsd:enumeration value="request-response"/>
    </xsd:restriction>
  </xsd:simpleType>
  <xsd:element name="pick" type="tPick"/>
  <xsd:complexType name="tPick">
    <xsd:annotation>
      <xsd:documentation>
        XSD Authors: The child element onAlarm needs to be a Local
        Element Declaration, because there is another onAlarm element
        defined for event handlers.
      </xsd:documentation>
    </xsd:annotation>
    <xsd:sequence>
      <xsd:element maxOccurs="unbounded" ref="onMessage"/>
      <xsd:element name="onAlarm" type="tOnAlarmPick"
                   maxOccurs="unbounded" minOccurs="0"/>
    </xsd:sequence>
    <xsd:attribute name="createInstance" type="tBoolean" use="required"/>
  </xsd:complexType>
  <xsd:element name="onMessage" type="tOnMessage"/>
  <xsd:complexType name="tOnMessage">
    <xsd:complexContent>
      <xsd:extension base="tOnMsgCommon">
        <xsd:sequence>
          <xsd:group ref="activity"/>
        </xsd:sequence>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="tOnAlarmPick">
    <xsd:sequence>
      <xsd:group ref="forOrUntilGroup"/>
      <xsd:group ref="activity"/>
    </xsd:sequence>
  </xsd:complexType>
  <xsd:element name="repeatUntil" type="tRepeatUntil"/>
  <xsd:complexType name="tRepeatUntil">
    <xsd:sequence>
      <xsd:group ref="activity"/>
      <xsd:element ref="condition"/>
    </xsd:sequence>
  </xsd:complexType>
  <xsd:element name="reply" type="tReply"/>
  <xsd:complexType name="tReply">
    <xsd:annotation>
      <xsd:documentation>
        XSD Authors: The child element correlations needs to be a
        Local Element Declaration, because there is another
        correlations element defined for the invoke activity.
      </xsd:documentation>
    </xsd:annotation>
    <xsd:sequence>
      <xsd:element name="correlations" type="tCorrelations" minOccurs="0"/>
    </xsd:sequence>
    <xsd:attribute name="partnerLink" type="xsd:NCName" use="required"/>
    <xsd:attribute name="operation" type="xsd:NCName" use="required"/>
    <xsd:attribute name="variable" type="BPELVariableName" use="optional"/>
    <xsd:attribute name="faultName" type="xsd:QName"/>
    <xsd:attribute name="messageExchange" type="xsd:NCName" use="required"/>
  </xsd:complexType>
  <xsd:element name="rethrow" type="tRethrow"/>
  <xsd:complexType name="tRethrow"/>
  <xsd:element name="scope" type="tScope"/>
  <xsd:complexType name="tScope">
    <xsd:annotation>
      <xsd:documentation>
        There is no schema-level default for "exitOnStandardFault" at
        "scope". Because, it will inherit default from enclosing scope
        or process.
      </xsd:documentation>
    </xsd:annotation>
    <xsd:sequence>
      <xsd:element minOccurs="0" ref="partnerLinks"/>
      <xsd:element minOccurs="0" ref="messageExchanges"/>
      <xsd:element minOccurs="0" ref="variables"/>
      <xsd:element minOccurs="0" ref="correlationSets"/>
      <xsd:element minOccurs="1" ref="faultHandlers"/>
      <xsd:element minOccurs="1" ref="compensationHandler"/>
      <xsd:element minOccurs="1" ref="terminationHandler"/>
      <xsd:element minOccurs="0" ref="eventHandlers"/>
      <xsd:group ref="activity"/>
    </xsd:sequence>
    <xsd:attribute name="name" type="xsd:NCName" use="required"/>
    <xsd:attribute name="isolated" type="tBoolean" use="required"/>
    <xsd:attribute name="exitOnStandardFault" type="tBoolean" use="required"/>
  </xsd:complexType>
  <xsd:element name="compensationHandler" type="tActivityContainer">
    <xsd:annotation>
      <xsd:documentation>
        This element can contain all activities including the
        activities compensate and compensateScope.
      </xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:element name="terminationHandler" type="tActivityContainer">
    <xsd:annotation>
      <xsd:documentation>
        This element can contain all activities including the
        activities compensate and compensateScope.
      </xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:element name="throw" type="tThrow"/>
  <xsd:complexType name="tThrow">
    <xsd:attribute name="faultName" type="xsd:QName" use="required"/>
    <xsd:attribute name="faultVariable" type="BPELVariableName"/>
  </xsd:complexType>
  <xsd:element name="validate" type="tValidate"/>
  <xsd:complexType name="tValidate">
    <xsd:attribute name="variables" type="BPELVariableNames" use="required"/>
  </xsd:complexType>
  <xsd:simpleType name="BPELVariableNames">
    <xsd:restriction>
      <xsd:simpleType>
        <xsd:list itemType="BPELVariableName"/>
      </xsd:simpleType>
      <xsd:minLength value="1"/>
    </xsd:restriction>
  </xsd:simpleType>
  <xsd:element name="wait" type="tWait"/>
  <xsd:complexType name="tWait">
    <xsd:choice>
      <xsd:element ref="for"/>
      <xsd:element ref="until"/>
    </xsd:choice>
  </xsd:complexType>
  <xsd:complexType name="tExpression" mixed="true">
    <xsd:sequence>
      <xsd:any processContents="lax" minOccurs="0"
        maxOccurs="unbounded" />
    </xsd:sequence>
    <xsd:attribute name="expressionLanguage" type="xsd:anyURI" />
    <xsd:anyAttribute namespace="##other" processContents="lax" />
  </xsd:complexType>
  <xsd:complexType name="tCondition">
    <xsd:complexContent mixed="true">
      <xsd:extension base="tExpression" />
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="condition" type="tBoolean-expr"/>
  <xsd:complexType name="tBoolean-expr">
    <xsd:complexContent mixed="true">
      <xsd:extension base="tExpression" />
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="tDuration-expr">
    <xsd:complexContent mixed="true">
      <xsd:extension base="tExpression" />
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="tDeadline-expr">
    <xsd:complexContent mixed="true">
      <xsd:extension base="tExpression" />
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:simpleType name="tBoolean">
    <xsd:restriction base="xsd:string">
      <xsd:enumeration value="yes"/>
      <xsd:enumeration value="no"/>
    </xsd:restriction>
  </xsd:simpleType>
</xsd:schema>